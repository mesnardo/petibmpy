{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PetibmPy: Python processing tools for PetIBM Small Python package to perform pre- and post-processing steps for PetIBM . Dependencies PetIBM (last tested: 0.5.1 ) Python ( 3.6.10 ) H5Py ( 2.10.0 ) lxml ( 4.5.0 ) Matplotlib ( 3.1.1 ) NumPy ( 1.18.1 ) Pyyaml ( 5.3 ) SciPy ( 1.3.2 ) Installation With Anaconda: conda env create --name=py36-petibmpy --file=environment.yaml conda activate py36-petibmpy python setup.py install Contact Please e-mail Olivier Mesnard if you have any questions, suggestions, or feedback. To report bugs, please use the GitHub issue tracking system. We also welcome pull-requests.","title":"Home"},{"location":"#petibmpy-python-processing-tools-for-petibm","text":"Small Python package to perform pre- and post-processing steps for PetIBM .","title":"PetibmPy: Python processing tools for PetIBM"},{"location":"#dependencies","text":"PetIBM (last tested: 0.5.1 ) Python ( 3.6.10 ) H5Py ( 2.10.0 ) lxml ( 4.5.0 ) Matplotlib ( 3.1.1 ) NumPy ( 1.18.1 ) Pyyaml ( 5.3 ) SciPy ( 1.3.2 )","title":"Dependencies"},{"location":"#installation","text":"With Anaconda: conda env create --name=py36-petibmpy --file=environment.yaml conda activate py36-petibmpy python setup.py install","title":"Installation"},{"location":"#contact","text":"Please e-mail Olivier Mesnard if you have any questions, suggestions, or feedback. To report bugs, please use the GitHub issue tracking system. We also welcome pull-requests.","title":"Contact"},{"location":"api/","text":"petibmpy petibmpy.bod Module with I/O functions for immersed body. write_body(filepath, *coords) Save the boundary coordinates to a file. Parameters filepath : pathlib.Path object or string Path of the file to write. coords : tuple of lists or numpy.ndarray objects The x, y, and z coordinates of the boundary. read_body(filepath, **kwargs) Read the boundary coordinates from a file. Parameters filepath : pathlib.Path object or string Path of the file to read. kwargs : dictionary Keyword arguments to pass to numpy.loadtxt. Returns coords : numpy.ndarray The boundary coordinates. petibmpy.misc Collection of miscellaneous functions and classes. check_not_primary_variables(f) Check if variable names are not primary variables. delete_datasets_hdf5(filepath, names) Delete datasets from HDF5 file. If a name if not a dataset, the function moves to the next name. Parameters filepath : pathlib.Path or str Path of the HDF5 file. names : list or tuple Names of the datasets to delete. _Sequence class _Sequence(list) Dummy class to store list/tuple in YAML file in pretty format. _represent_dictionary_order(dict_data) Pretty output of dictionary to YAML file. _represent_limits(data) Pretty output of list/tuple to YAML file. _setup_yaml() Configure output format to YAML file. petibmpy.extrude Module with function to extrude a 2D geometry in the third direction. extrude2d(x, y, limits, n=None, ds=None, force=False) Extrude the two-dimensional section along the third direction (z). Parameters x : numpy.ndarray x-coordinates of the section. y : numpy.ndarray y-coordinates of the section. limits : 2-list of floats Limits of the extrusion. n : integer, optional Number of divisions in the z-direction; default: None. ds : float, optional Desired segment-length; default: None. force : boolean, optional Forces the extrusion to the limits prescribed; default: False. Returns x : numpy.ndarray x-coordinates of the geometry. y : numpy.ndarray y-coordinates of the geometry. z : numpy.ndarray z-coordinates of the geometry. petibmpy.field Module to read/write a PetIBM field variable. read_field_hdf5(filepath, name) Read a field from HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable. Returns field : numpy.ndarray The PetIBM field variable as a NumPy array of floats. write_field_hdf5(filepath, name, field) Write a field to a HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable. field : numpy.ndarray The PetIBM field variable as a NumPy array of floats. linear_interpolation(u, x, xi) Perform a linear interpolation along the first axis. Parameters u : numpy.ndarray Array to interpolate. x : numpy.ndarray Gridline locations. xi : float Target location. Returns ui : numpy.ndarray or float Interpolated values. interpolate3d(field, grid1, grid2, **kwargs) Interpolate a 3D field from one grid to another. Parameters field : numpy.ndarray The 3D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y, z). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y, z). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn. Returns field2 : numpy.ndarray The interpolated 3D field. interpolate2d(field, grid1, grid2, **kwargs) Interpolate a 2D field from one grid to another. Parameters field : numpy.ndarray The 2D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn. Returns field2 : numpy.ndarray The interpolated 2D field. petibmpy.logview Module to parse a PETSc log view file. PETScLogView class PETScLogView(object) Parse a PETSc log view file. __init__(filepath=None) Initialize the parser. parse_log_view(filepath) Parse a PETSc log view file. _read_walltime() Parse and return the wall-time clock in seconds. _read_resident_set_size(unit='GB') Parse and return the resident set size. _read_events() Parse information about PETSc events. _parse_event(line) Parse information about an event. plot_events_breakdown(ax, runs, ylabel='wall-time (s)', event_names=None, bar_width=0.5) Add a bar chart of the breakdown of events to an axis. petibmpy.regularize Module with function to regularize a 2D curve (with uniform resolution). _get_perimeter(x, y) Return the perimeter of the geometry. Parameters x : numpy.ndarray x-coordinate of the points along the curve. y : numpy.ndarray y-coordinate of the points along the curve. Returns perimeter : float The perimeter. regularize2d(xo, yo, N=None, ds=None, atol=1.0E-06) Regularize the geometry. Parameters xo: numpy.ndarray of floats The x-coordinates of the boundary to regularize. yo: numpy.ndarray of floats The y-coordinates of the boundary to regularize. N: integer, optional Number of divisions; default: None. ds: float, optional Desired segment-length; default: None. atol: float, optional Desired tolerance for discretization; default: 1.0E-06. Returns x: numpy.ndarray of floats The x-coordinates of the regularized boundary. y: numpy.ndarray of floats The y-coordinates of the regularized boundary. petibmpy.forces Module with functions to process forces. read_forces(*filepaths) Read PetIBM forces from given file(s). If multiple files are provided, the histories are concatenated. Parameters filepaths : tuple of pathlib.Path objects or strings Path of the files to load the history from. Returns data : numpy.ndarray Time followed by the forces in the x, y, and z directions. get_force_coefficients(*forces, coeff=1.0) Convert forces to force coefficients. Parameters forces : tuple of numpy.ndarray objects The forces. coeff : float (optional) The scaling coefficient; default: 1.0. Returns force_coeffs : tuple of numpy.ndarray objects The force coefficients. get_time_averaged_values(t, *forces, limits=(-numpy.infty, numpy.infty)) Compute the time-averaged values. Parameters t : numpy.ndarray object The time values. forces : tuple of numpy.ndarray objects The forces (or force coefficients). limits : tuple of 2 floats (optional) Time limits used to compute the mean; default: (-inf, +inf). Returns means : tuple of floats The time-averaged values. get_rms_values(t, *forces, limits=(-numpy.infty, numpy.infty)) Compute the root-mean-square of the signals. Parameters t : numpy.ndarray object The time values. forces : tuple of numpy.ndarray objects The forces (or force coefficients). limits : tuple of 2 floats (optional) Time limits used to compute the RMS; default: (-inf, +inf). Returns rms : tuple of floats The RMS values. petibmpy.version Set up the version. _version_major _version_minor _version_micro _version_extra _ver __version__ CLASSIFIERS NAME MAINTAINER MAINTAINER_EMAIL DESCRIPTION LONG_DESCRIPTION URL DOWNLOAD_URL LICENSE AUTHOR AUTHOR_EMAIL PLATFORMS MAJOR MINOR MICRO VERSION PACKAGES PACKAGE_DATA REQUIRES petibmpy.grid Module to create/read/write a PetIBM grid. CartesianGrid class CartesianGrid() Contain information about a structured Cartesian grid. __init__(config=None) Initialize the grid. Parameters config : dictionary (optional) Configuration of the grid to create; default: None. __repr__(ndigits=6) Representation of the grid. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. create(config) Create the grid. Parameters config : dictionary Configuration of the grid. get_number_cells() Return the number of cells in the grid. get_gridlines() Return the gridlines as a list of 1D NumPy arrays of floats. write_hdf5(filepath) Save the grid into HDF5 file. Parameters filepath : pathlib.Path or string Path of the HDF5 file to write into. write_yaml(filepath, ndigits=6) Write the YAML configuration node for PetIBM. Parameters filepath : pathlib.Path or string Path of the YAML file to write into. ndigits : integer (optional) Number of digits to represent floats; default: 6. plot_gridlines(**kwargs) plot_gridlines_2d(figsize=(6.0, 6.0), color='black', xlabel='x', ylabel='y', xrange=(0, None, 1), yrange=(0, None, 1), xlim=(-numpy.infty, numpy.infty), ylim=(-numpy.infty, numpy.infty)) Create a Matplotlib figure with gridlines. Parameters figsize : (float, float), optional Width and height of the figure in inches; default is (6, 6). color : str, optional Color of the gridlines; default is black. xlabel : str, optional Label along the x axis; default is 'x'. ylabel : str, optional Label along the y axis; default is 'y'. xrange : (int, int, int), optional Index range (min, max, stride) to consider for x gridlines; default is to consider all stations (0, None, 1). yrange : (int, int, int), optional Index range (min, max, stride) to consider for y gridlines; default is to consider all stations (0, None, 1). xlim : (float, float), optional Limits of the domain in the x direction to plot; default is to plot the entire domain. ylim : (float, float), optional Limits of the domain in the y direction to plot; default is to plot the entire domain. Returns matplotlib.figure.Figure Matplotlib Figure. matplotlib.axes.Axes Matplotlib Axes object. plot_gridlines_3d(figsize=(12.0, 6.0), color='black', xlabel='x', ylabel='y', zlabel='z', xrange=(0, None, 1), yrange=(0, None, 1), zrange=(0, None, 1), xlim=(-numpy.infty, numpy.infty), ylim=(-numpy.infty, numpy.infty), zlim=(-numpy.infty, numpy.infty)) Create a Matplotlib figure with gridlines. Parameters figsize : (float, float), optional Width and height of the figure in inches; default is (12, 6). color : str, optional Color of the gridlines; default is black. xlabel : str, optional Label along the x axis; default is 'x'. ylabel : str, optional Label along the y axis; default is 'y'. zlabel : str, optional Label along the z axis; default is 'z'. xrange : (int, int, int), optional Index range (min, max, stride) to consider for x gridlines; default is to consider all stations (0, None, 1). yrange : (int, int, int), optional Index range (min, max, stride) to consider for y gridlines; default is to consider all stations (0, None, 1). zrange : (int, int, int), optional Index range (min, max, stride) to consider for z gridlines; default is to consider all stations (0, None, 1). xlim : (float, float), optional Limits of the domain in the x direction to plot; default is to plot the entire domain. ylim : (float, float), optional Limits of the domain in the y direction to plot; default is to plot the entire domain. zlim : (float, float), optional Limits of the domain in the z direction to plot; default is to plot the entire domain. Returns matplotlib.figure.Figure Matplotlib Figure. array of matplotlib.axes.Axes Array of Matplotlib Axes objects. _plot_gridlines_2d(ax, x, y, color='black', xrange=(0, None, 1), yrange=(0, None, 1), xlim=(-numpy.infty, numpy.infty), ylim=(-numpy.infty, numpy.infty)) print_info() Print some information about the cell widths. The method prints the minimum and maximum cell widths along each direction, as well as max/min ratio across directions. GridLine class GridLine() Contain information about a gridline of a structured Cartesian grid. __init__(config=None) Initialize the gridline. Parameters config : dictionary (optional) Configuration of the gridline to create; default: None. __repr__(ndigits=6) Representation of the gridline. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. create(config) Create the gridline. Parameters config : dictionary Configuration of the gridline. get_size() Return the number of vertices in the gridline. asarray(tol=1e-12) Return the gridline as a 1D NumPy array of floats. yaml_node(ndigits=6) Return the YAML configuration node for PetIBM. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. Returns node : dictionary Configuration node for the gridline. _split_needed(config) Check if need to split a configuration into uniform and stretched. We only to split the configuration is the last width is bigger than the target maximum width. Parameters config : dict Configuration of the segment to split. Returns bool True is splitting is needed. _split_uniform_and_stretch(config) Split configuration of a stretched portion. The configuration is split into a stretch portion and a uniform portion with a cell width equal to the maximum cell width provided. Parameters config : dict Configuration of the segment to split. Returns dict, dict Configurations for the stretched and uniform sub-segments. Segment class Segment() Contain information about a segment of a gridline. __init__(config=None) Initialize the segment. Parameters config : dictionary (optional) Configuration of the segment to create; default: None. __repr__(ndigits=6) Representation of the segment. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. create(config) Create the segment. Parameters config : dictionary Configuration of the segment. asarray() Return the segment as a 1D NumPy array of floats. yaml_node(ndigits=6) Return the YAML configuration node for PetIBM. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. Returns node : dictionary Configuration node for the segment. read_grid_hdf5(filepath, name) Read a grid from HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid. Returns x : numpy.ndarray The x-coordinates along a gridline in the x-direction. y : numpy.ndarray The y-coordinates along a gridline in the y-direction. z : numpy.ndarray The z-coordinates along a gridline in the z-direction. write_grid_hdf5(filepath, name, *grid) Write a grid to a HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid. grid : tuple of numpy.ndarray objects The gridline coordinates as 1D arrays of floats. petibmpy.qcriterion Module with functions to compute the Q-criterion qcriterion(velocity, grid) Compute the Q-criterion on a 3D grid. Parameters velocity : tuple of numpy.ndarray objects The velocity vector field given as (u, v, w). grid : tuple of numpy.ndarray objects The structured Cartesian grid given as (x, y, z). Returns qcrit : numpy.ndarray Value of the Q-criterion on the 3D grid. petibmpy.probes Module for PetIBM probes. _ProbeBase class _ProbeBase(object) Base class for a probe. _type __init__(name, field, viewer='hdf5', path=None, n_monitor=None, n_sum=None, t_start=None, t_end=None) Initialize a base probe. Parameters name : str Name of the probe field : str Name of the field variable to monitor viewer : str, optional Type of viewer, by default 'hdf5' path : pathlib.Path or str, optional Path of the output file, by default None n_monitor : int, optional Monitoring frequency, by default None n_sum : int, optional Number of time steps to average, by default None t_start : float, optional Starting time of monitoring, by default None t_end : float, optional Ending time of monitoring, by default None __repr__() Return the string representation. Returns str The string representation. set_viewer(viewer='hdf5', path=None) Set the output viewer type and path. The path is relative to the PetIBM output directory. Parameters viewer : str, optional Type of viewer, choices are 'hdf5' or 'ascii', by default 'hdf5' path : pathlib.Path or str, optional Path of the output file, by default None _get_yaml_node() ProbeVolume class ProbeVolume(_ProbeBase) Class for a volume probe (monitoring solution in sub-volume). _type __init__(name, field, box=None, adjust_box=False, grid=None, **kwargs) Initialize a volume probe. Parameters name : str Name of the probe field : str Name of the field variable to monitor box : list or numpy.ndarray, optional Limits of the box, by default None adjust_box : bool, optional Adjust the box given a grid, by default False grid : list or numpy.ndarray, optional The grid of the field, by default None **kwargs: dict, optional Optional arguments passed to the base class constructor __repr__() Return the string representation. Returns str The string representation _check_type(cls, ptype) Check if probe type matches class type. Parameters ptype : str Type of the probe Returns bool True if type is 'VOLUME' _get_yaml_node(ndigits=6, **kwargs) adjust_box(grid, box=None) Adjust the box so that limits lie between two grid points. Parameters grid : list or numpy.ndarray The grid of the field to minotor box : list or numpy.ndarray, optional Estimated limits of the box, by default None read_hdf5(filepath, time, ndigits=6) Read the probe from a HDF5 file at a given time. Parameters filepath : pathlib.Path or str Path of file with the solution of the probe time : float Time value ndigits : int, optional Number of digits to round the time value, by default 6 Returns tuple The mesh grid of the probe numpy.ndarray The probe values read_hdf5_deprecated(filepath, time, ndigits=6) Read the probe from a HDF5 file at a given time. Method is deprecated and will be removed in next release. Parameters filepath : pathlib.Path or str Path of file with the solution of the probe time : float Time value ndigits : int, optional Number of digits to round the time value, by default 6 Returns tuple The mesh grid of the probe numpy.ndarray The probe values ProbePoint class ProbePoint(_ProbeBase) Class to monitor a field at a single point. _type __init__(name, field, loc=None, **kwargs) Initialize a point probe. Parameters name : str Name of the probe field : str Name of the field to monitor loc : list or numpy.ndarray, optional Coordinates of the point to monitor, by default None **kwargs: dict, optional Optional arguments passed to the base class constructor __repr__() Return the string representation. Returns str The string representation _check_type(cls, ptype) Check if probe type matches class type. Parameters ptype : str Type of the probe Returns bool True if type is 'POINT' set_loc(loc) Set the coordinates of the point to monitor. Parameters loc : list or numpy.ndarray Coordinates of the point _get_yaml_node(**kwargs) Probe(ptype, *args, **kwargs) Create a probe. Parameters ptype : str Type of the probe, choices are 'VOLUME' or 'POINT' Returns ProbeVolume or ProbePoint The probe Raises ValueError Type is neither 'VOLUME' nor 'POINT' probes_yaml_dump(probes, filepath, mode='w') Save the probes configuration in a YAML file. Parameters probes : list The list of probes filepath : pathlib.Path or str Path of the YAML file mode : str, optional Mode to open file, choices are 'w' or 'a', by default 'w' petibmpy.vorticit Module with functions to compute the vorticity. gradient(u, grid, axis=0) Compute the gradient of u along a given axis. Parameters u : numpy.ndarray An N-dimensional array. grid : tuple of N 1-D arrays Grid on which u is defined. axis : int, optional Axis along which to compute the gradient, by default 0. Returns numpy.ndarray The N-dimensional gradient of u along a given axis. tuple of N 1-D arrays The grid on which is defined the gradient. _gradient(u, x) compute_wx(v, w, grid_v, grid_w) Compute the x-component of the vorticity field. Parameters v : numpy.ndarray y-component of the velocity field as a N-dimensional array. w : numpy.ndarray z-component of the velocity field as a N-dimensional array. grid_v : tuple of N 1-D arrays Grid on which the y-velocity is defined. grid_w : tuple of N 1-D arrays Grid on which the z-velocity is defined. Returns numpy.ndarray x-component of the vorticity field. tuple of N 1-D arrays Grid on which the x-vorticity is defined. compute_wy(u, w, grid_u, grid_w) Compute the y-component of the vorticity field. Parameters u : numpy.ndarray x-component of the velocity field as a N-dimensional array. w : numpy.ndarray z-component of the velocity field as a N-dimensional array. grid_x : tuple of N 1-D arrays Grid on which the x-velocity is defined. grid_w : tuple of N 1-D arrays Grid on which the z-velocity is defined. Returns numpy.ndarray y-component of the vorticity field. tuple of N 1-D arrays Grid on which the y-vorticity is defined. compute_wz(u, v, grid_u, grid_v) Compute the z-component of the vorticity field. Parameters u : numpy.ndarray x-component of the velocity field as a N-dimensional array. v : numpy.ndarray y-component of the velocity field as a N-dimensional array. grid_u : tuple of N 1-D arrays Grid on which the x-velocity is defined. grid_v : tuple of N 1-D arrays Grid on which the y-velocity is defined. Returns numpy.ndarray z-component of the vorticity field. tuple of N 1-D arrays Grid on which the z-vorticity is defined. petibmpy.rotate Module with function to rotate a geometry. rotate2d(x, y, center=(0.0, 0.0), angle=0.0, mode='deg') Rotate (x, y) coordinates around a center. Parameters x : numpy.ndarray of floats The x-coordinates to rotate. y : numpy.ndarray of floats The y-coordinates to rotate. center : 2-tuple of floats, optional The center of rotation; default: (0.0, 0.0). angle : float, optional The angle of rotation; default: 0.0. mode : string, optional Whether angle is provided in degrees or in radians; choices: 'deg', 'rad'; default: 'deg'. Returns x_new : numpy.ndarray of floats The rotated x-coordinates. y_new : numpy.ndarray of floats The rotated y-coordinates. rotate3d(x, y, z, roll=0.0, yaw=0.0, pitch=0.0, center=(0.0, 0.0, 0.0)) Rotate 3D point. Parameters x : float x-coordinate of point. y : float y-coordinate of point. z : float z-coordinate of point. roll : float (optional) Roll angle (in radians); default: 0.0. yaw : float (optional) Yaw angle (in radians); default: 0.0. pitch : float (optional) Pitch angle (in radians); default: 0.0. center : tuple of floats Coordinates of the center of rotation; default: [0.0, 0.0, 0.0]. Returns xr : float x-coordinate of rotated point. yr : float y-coordinate of rotated point. zr : float z-coordinate of rotated point. rotate3d_vec petibmpy.createxdmf Module to create a XDMF file for a PetIBM field variable. write_xdmf(outpath, datadir, gridpath, name, nstart=None, nt=None, nsave=None, states=None, times=None) Write a XDMF file to read the solution of a PetIBM variable. Parameters outpath : pathlib.Path object Path of the XDMF file to create. datadir : pathlib.Path object Data directory. gridpath : pathlib.Path object Path of the file containing the gridline coordinates. name : string Name of the field variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None. write_xdmf_multi(outpath, config, nstart=None, nt=None, nsave=None, states=None, times=None) Write a XDMF file to read the solution of multiple PetIBM variables. Parameters outpath : pathlib.Path object Path of the XDMF file to create. config : dictionary Should contains two keys: 'grid' and 'data'. The value mapped to 'grid' is the path of the HDF5 grid file. The value mapped to 'data' is a dictionary. Each item of the 'data' dictionary is labeled with the name of the variable to add to the XDMF file that is mapped to the path of the directory that contains the numerical solution for that variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None.","title":"API"},{"location":"api/#petibmpy","text":"","title":"petibmpy"},{"location":"api/#petibmpybod","text":"Module with I/O functions for immersed body.","title":"petibmpy.bod"},{"location":"api/#write_bodyfilepath-coords","text":"Save the boundary coordinates to a file.","title":"write_body(filepath, *coords)"},{"location":"api/#parameters","text":"filepath : pathlib.Path object or string Path of the file to write. coords : tuple of lists or numpy.ndarray objects The x, y, and z coordinates of the boundary.","title":"Parameters"},{"location":"api/#read_bodyfilepath-kwargs","text":"Read the boundary coordinates from a file.","title":"read_body(filepath, **kwargs)"},{"location":"api/#parameters_1","text":"filepath : pathlib.Path object or string Path of the file to read. kwargs : dictionary Keyword arguments to pass to numpy.loadtxt.","title":"Parameters"},{"location":"api/#returns","text":"coords : numpy.ndarray The boundary coordinates.","title":"Returns"},{"location":"api/#petibmpymisc","text":"Collection of miscellaneous functions and classes.","title":"petibmpy.misc"},{"location":"api/#check_not_primary_variablesf","text":"Check if variable names are not primary variables.","title":"check_not_primary_variables(f)"},{"location":"api/#delete_datasets_hdf5filepath-names","text":"Delete datasets from HDF5 file. If a name if not a dataset, the function moves to the next name.","title":"delete_datasets_hdf5(filepath, names)"},{"location":"api/#parameters_2","text":"filepath : pathlib.Path or str Path of the HDF5 file. names : list or tuple Names of the datasets to delete.","title":"Parameters"},{"location":"api/#_sequence","text":"class _Sequence(list) Dummy class to store list/tuple in YAML file in pretty format.","title":"_Sequence"},{"location":"api/#_represent_dictionary_orderdict_data","text":"Pretty output of dictionary to YAML file.","title":"_represent_dictionary_order(dict_data)"},{"location":"api/#_represent_limitsdata","text":"Pretty output of list/tuple to YAML file.","title":"_represent_limits(data)"},{"location":"api/#_setup_yaml","text":"Configure output format to YAML file.","title":"_setup_yaml()"},{"location":"api/#petibmpyextrude","text":"Module with function to extrude a 2D geometry in the third direction.","title":"petibmpy.extrude"},{"location":"api/#extrude2dx-y-limits-nnone-dsnone-forcefalse","text":"Extrude the two-dimensional section along the third direction (z).","title":"extrude2d(x, y, limits, n=None, ds=None, force=False)"},{"location":"api/#parameters_3","text":"x : numpy.ndarray x-coordinates of the section. y : numpy.ndarray y-coordinates of the section. limits : 2-list of floats Limits of the extrusion. n : integer, optional Number of divisions in the z-direction; default: None. ds : float, optional Desired segment-length; default: None. force : boolean, optional Forces the extrusion to the limits prescribed; default: False.","title":"Parameters"},{"location":"api/#returns_1","text":"x : numpy.ndarray x-coordinates of the geometry. y : numpy.ndarray y-coordinates of the geometry. z : numpy.ndarray z-coordinates of the geometry.","title":"Returns"},{"location":"api/#petibmpyfield","text":"Module to read/write a PetIBM field variable.","title":"petibmpy.field"},{"location":"api/#read_field_hdf5filepath-name","text":"Read a field from HDF5 file.","title":"read_field_hdf5(filepath, name)"},{"location":"api/#parameters_4","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable.","title":"Parameters"},{"location":"api/#returns_2","text":"field : numpy.ndarray The PetIBM field variable as a NumPy array of floats.","title":"Returns"},{"location":"api/#write_field_hdf5filepath-name-field","text":"Write a field to a HDF5 file.","title":"write_field_hdf5(filepath, name, field)"},{"location":"api/#parameters_5","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable. field : numpy.ndarray The PetIBM field variable as a NumPy array of floats.","title":"Parameters"},{"location":"api/#linear_interpolationu-x-xi","text":"Perform a linear interpolation along the first axis.","title":"linear_interpolation(u, x, xi)"},{"location":"api/#parameters_6","text":"u : numpy.ndarray Array to interpolate. x : numpy.ndarray Gridline locations. xi : float Target location.","title":"Parameters"},{"location":"api/#returns_3","text":"ui : numpy.ndarray or float Interpolated values.","title":"Returns"},{"location":"api/#interpolate3dfield-grid1-grid2-kwargs","text":"Interpolate a 3D field from one grid to another.","title":"interpolate3d(field, grid1, grid2, **kwargs)"},{"location":"api/#parameters_7","text":"field : numpy.ndarray The 3D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y, z). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y, z). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn.","title":"Parameters"},{"location":"api/#returns_4","text":"field2 : numpy.ndarray The interpolated 3D field.","title":"Returns"},{"location":"api/#interpolate2dfield-grid1-grid2-kwargs","text":"Interpolate a 2D field from one grid to another.","title":"interpolate2d(field, grid1, grid2, **kwargs)"},{"location":"api/#parameters_8","text":"field : numpy.ndarray The 2D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn.","title":"Parameters"},{"location":"api/#returns_5","text":"field2 : numpy.ndarray The interpolated 2D field.","title":"Returns"},{"location":"api/#petibmpylogview","text":"Module to parse a PETSc log view file.","title":"petibmpy.logview"},{"location":"api/#petsclogview","text":"class PETScLogView(object) Parse a PETSc log view file.","title":"PETScLogView"},{"location":"api/#__init__filepathnone","text":"Initialize the parser.","title":"__init__(filepath=None)"},{"location":"api/#parse_log_viewfilepath","text":"Parse a PETSc log view file.","title":"parse_log_view(filepath)"},{"location":"api/#_read_walltime","text":"Parse and return the wall-time clock in seconds.","title":"_read_walltime()"},{"location":"api/#_read_resident_set_sizeunitgb","text":"Parse and return the resident set size.","title":"_read_resident_set_size(unit='GB')"},{"location":"api/#_read_events","text":"Parse information about PETSc events.","title":"_read_events()"},{"location":"api/#_parse_eventline","text":"Parse information about an event.","title":"_parse_event(line)"},{"location":"api/#plot_events_breakdownax-runs-ylabelwall-time-s-event_namesnone-bar_width05","text":"Add a bar chart of the breakdown of events to an axis.","title":"plot_events_breakdown(ax, runs, ylabel='wall-time (s)', event_names=None, bar_width=0.5)"},{"location":"api/#petibmpyregularize","text":"Module with function to regularize a 2D curve (with uniform resolution).","title":"petibmpy.regularize"},{"location":"api/#_get_perimeterx-y","text":"Return the perimeter of the geometry.","title":"_get_perimeter(x, y)"},{"location":"api/#parameters_9","text":"x : numpy.ndarray x-coordinate of the points along the curve. y : numpy.ndarray y-coordinate of the points along the curve.","title":"Parameters"},{"location":"api/#returns_6","text":"perimeter : float The perimeter.","title":"Returns"},{"location":"api/#regularize2dxo-yo-nnone-dsnone-atol10e-06","text":"Regularize the geometry.","title":"regularize2d(xo, yo, N=None, ds=None, atol=1.0E-06)"},{"location":"api/#parameters_10","text":"xo: numpy.ndarray of floats The x-coordinates of the boundary to regularize. yo: numpy.ndarray of floats The y-coordinates of the boundary to regularize. N: integer, optional Number of divisions; default: None. ds: float, optional Desired segment-length; default: None. atol: float, optional Desired tolerance for discretization; default: 1.0E-06.","title":"Parameters"},{"location":"api/#returns_7","text":"x: numpy.ndarray of floats The x-coordinates of the regularized boundary. y: numpy.ndarray of floats The y-coordinates of the regularized boundary.","title":"Returns"},{"location":"api/#petibmpyforces","text":"Module with functions to process forces.","title":"petibmpy.forces"},{"location":"api/#read_forcesfilepaths","text":"Read PetIBM forces from given file(s). If multiple files are provided, the histories are concatenated.","title":"read_forces(*filepaths)"},{"location":"api/#parameters_11","text":"filepaths : tuple of pathlib.Path objects or strings Path of the files to load the history from.","title":"Parameters"},{"location":"api/#returns_8","text":"data : numpy.ndarray Time followed by the forces in the x, y, and z directions.","title":"Returns"},{"location":"api/#get_force_coefficientsforces-coeff10","text":"Convert forces to force coefficients.","title":"get_force_coefficients(*forces, coeff=1.0)"},{"location":"api/#parameters_12","text":"forces : tuple of numpy.ndarray objects The forces. coeff : float (optional) The scaling coefficient; default: 1.0.","title":"Parameters"},{"location":"api/#returns_9","text":"force_coeffs : tuple of numpy.ndarray objects The force coefficients.","title":"Returns"},{"location":"api/#get_time_averaged_valuest-forces-limits-numpyinfty-numpyinfty","text":"Compute the time-averaged values.","title":"get_time_averaged_values(t, *forces, limits=(-numpy.infty, numpy.infty))"},{"location":"api/#parameters_13","text":"t : numpy.ndarray object The time values. forces : tuple of numpy.ndarray objects The forces (or force coefficients). limits : tuple of 2 floats (optional) Time limits used to compute the mean; default: (-inf, +inf).","title":"Parameters"},{"location":"api/#returns_10","text":"means : tuple of floats The time-averaged values.","title":"Returns"},{"location":"api/#get_rms_valuest-forces-limits-numpyinfty-numpyinfty","text":"Compute the root-mean-square of the signals.","title":"get_rms_values(t, *forces, limits=(-numpy.infty, numpy.infty))"},{"location":"api/#parameters_14","text":"t : numpy.ndarray object The time values. forces : tuple of numpy.ndarray objects The forces (or force coefficients). limits : tuple of 2 floats (optional) Time limits used to compute the RMS; default: (-inf, +inf).","title":"Parameters"},{"location":"api/#returns_11","text":"rms : tuple of floats The RMS values.","title":"Returns"},{"location":"api/#petibmpyversion","text":"Set up the version.","title":"petibmpy.version"},{"location":"api/#_version_major","text":"","title":"_version_major"},{"location":"api/#_version_minor","text":"","title":"_version_minor"},{"location":"api/#_version_micro","text":"","title":"_version_micro"},{"location":"api/#_version_extra","text":"","title":"_version_extra"},{"location":"api/#_ver","text":"","title":"_ver"},{"location":"api/#__version__","text":"","title":"__version__"},{"location":"api/#classifiers","text":"","title":"CLASSIFIERS"},{"location":"api/#name","text":"","title":"NAME"},{"location":"api/#maintainer","text":"","title":"MAINTAINER"},{"location":"api/#maintainer_email","text":"","title":"MAINTAINER_EMAIL"},{"location":"api/#description","text":"","title":"DESCRIPTION"},{"location":"api/#long_description","text":"","title":"LONG_DESCRIPTION"},{"location":"api/#url","text":"","title":"URL"},{"location":"api/#download_url","text":"","title":"DOWNLOAD_URL"},{"location":"api/#license","text":"","title":"LICENSE"},{"location":"api/#author","text":"","title":"AUTHOR"},{"location":"api/#author_email","text":"","title":"AUTHOR_EMAIL"},{"location":"api/#platforms","text":"","title":"PLATFORMS"},{"location":"api/#major","text":"","title":"MAJOR"},{"location":"api/#minor","text":"","title":"MINOR"},{"location":"api/#micro","text":"","title":"MICRO"},{"location":"api/#version","text":"","title":"VERSION"},{"location":"api/#packages","text":"","title":"PACKAGES"},{"location":"api/#package_data","text":"","title":"PACKAGE_DATA"},{"location":"api/#requires","text":"","title":"REQUIRES"},{"location":"api/#petibmpygrid","text":"Module to create/read/write a PetIBM grid.","title":"petibmpy.grid"},{"location":"api/#cartesiangrid","text":"class CartesianGrid() Contain information about a structured Cartesian grid.","title":"CartesianGrid"},{"location":"api/#__init__confignone","text":"Initialize the grid.","title":"__init__(config=None)"},{"location":"api/#parameters_15","text":"config : dictionary (optional) Configuration of the grid to create; default: None.","title":"Parameters"},{"location":"api/#__repr__ndigits6","text":"Representation of the grid.","title":"__repr__(ndigits=6)"},{"location":"api/#parameters_16","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#createconfig","text":"Create the grid.","title":"create(config)"},{"location":"api/#parameters_17","text":"config : dictionary Configuration of the grid.","title":"Parameters"},{"location":"api/#get_number_cells","text":"Return the number of cells in the grid.","title":"get_number_cells()"},{"location":"api/#get_gridlines","text":"Return the gridlines as a list of 1D NumPy arrays of floats.","title":"get_gridlines()"},{"location":"api/#write_hdf5filepath","text":"Save the grid into HDF5 file.","title":"write_hdf5(filepath)"},{"location":"api/#parameters_18","text":"filepath : pathlib.Path or string Path of the HDF5 file to write into.","title":"Parameters"},{"location":"api/#write_yamlfilepath-ndigits6","text":"Write the YAML configuration node for PetIBM.","title":"write_yaml(filepath, ndigits=6)"},{"location":"api/#parameters_19","text":"filepath : pathlib.Path or string Path of the YAML file to write into. ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#plot_gridlineskwargs","text":"","title":"plot_gridlines(**kwargs)"},{"location":"api/#plot_gridlines_2dfigsize60-60-colorblack-xlabelx-ylabely-xrange0-none-1-yrange0-none-1-xlim-numpyinfty-numpyinfty-ylim-numpyinfty-numpyinfty","text":"Create a Matplotlib figure with gridlines.","title":"plot_gridlines_2d(figsize=(6.0, 6.0), color='black', xlabel='x', ylabel='y', xrange=(0, None, 1), yrange=(0, None, 1), xlim=(-numpy.infty, numpy.infty), ylim=(-numpy.infty, numpy.infty))"},{"location":"api/#parameters_20","text":"figsize : (float, float), optional Width and height of the figure in inches; default is (6, 6). color : str, optional Color of the gridlines; default is black. xlabel : str, optional Label along the x axis; default is 'x'. ylabel : str, optional Label along the y axis; default is 'y'. xrange : (int, int, int), optional Index range (min, max, stride) to consider for x gridlines; default is to consider all stations (0, None, 1). yrange : (int, int, int), optional Index range (min, max, stride) to consider for y gridlines; default is to consider all stations (0, None, 1). xlim : (float, float), optional Limits of the domain in the x direction to plot; default is to plot the entire domain. ylim : (float, float), optional Limits of the domain in the y direction to plot; default is to plot the entire domain.","title":"Parameters"},{"location":"api/#returns_12","text":"matplotlib.figure.Figure Matplotlib Figure. matplotlib.axes.Axes Matplotlib Axes object.","title":"Returns"},{"location":"api/#plot_gridlines_3dfigsize120-60-colorblack-xlabelx-ylabely-zlabelz-xrange0-none-1-yrange0-none-1-zrange0-none-1-xlim-numpyinfty-numpyinfty-ylim-numpyinfty-numpyinfty-zlim-numpyinfty-numpyinfty","text":"Create a Matplotlib figure with gridlines.","title":"plot_gridlines_3d(figsize=(12.0, 6.0), color='black', xlabel='x', ylabel='y', zlabel='z', xrange=(0, None, 1), yrange=(0, None, 1), zrange=(0, None, 1), xlim=(-numpy.infty, numpy.infty), ylim=(-numpy.infty, numpy.infty), zlim=(-numpy.infty, numpy.infty))"},{"location":"api/#parameters_21","text":"figsize : (float, float), optional Width and height of the figure in inches; default is (12, 6). color : str, optional Color of the gridlines; default is black. xlabel : str, optional Label along the x axis; default is 'x'. ylabel : str, optional Label along the y axis; default is 'y'. zlabel : str, optional Label along the z axis; default is 'z'. xrange : (int, int, int), optional Index range (min, max, stride) to consider for x gridlines; default is to consider all stations (0, None, 1). yrange : (int, int, int), optional Index range (min, max, stride) to consider for y gridlines; default is to consider all stations (0, None, 1). zrange : (int, int, int), optional Index range (min, max, stride) to consider for z gridlines; default is to consider all stations (0, None, 1). xlim : (float, float), optional Limits of the domain in the x direction to plot; default is to plot the entire domain. ylim : (float, float), optional Limits of the domain in the y direction to plot; default is to plot the entire domain. zlim : (float, float), optional Limits of the domain in the z direction to plot; default is to plot the entire domain.","title":"Parameters"},{"location":"api/#returns_13","text":"matplotlib.figure.Figure Matplotlib Figure. array of matplotlib.axes.Axes Array of Matplotlib Axes objects.","title":"Returns"},{"location":"api/#_plot_gridlines_2dax-x-y-colorblack-xrange0-none-1-yrange0-none-1-xlim-numpyinfty-numpyinfty-ylim-numpyinfty-numpyinfty","text":"","title":"_plot_gridlines_2d(ax, x, y, color='black', xrange=(0, None, 1), yrange=(0, None, 1), xlim=(-numpy.infty, numpy.infty), ylim=(-numpy.infty, numpy.infty))"},{"location":"api/#print_info","text":"Print some information about the cell widths. The method prints the minimum and maximum cell widths along each direction, as well as max/min ratio across directions.","title":"print_info()"},{"location":"api/#gridline","text":"class GridLine() Contain information about a gridline of a structured Cartesian grid.","title":"GridLine"},{"location":"api/#__init__confignone_1","text":"Initialize the gridline.","title":"__init__(config=None)"},{"location":"api/#parameters_22","text":"config : dictionary (optional) Configuration of the gridline to create; default: None.","title":"Parameters"},{"location":"api/#__repr__ndigits6_1","text":"Representation of the gridline.","title":"__repr__(ndigits=6)"},{"location":"api/#parameters_23","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#createconfig_1","text":"Create the gridline.","title":"create(config)"},{"location":"api/#parameters_24","text":"config : dictionary Configuration of the gridline.","title":"Parameters"},{"location":"api/#get_size","text":"Return the number of vertices in the gridline.","title":"get_size()"},{"location":"api/#asarraytol1e-12","text":"Return the gridline as a 1D NumPy array of floats.","title":"asarray(tol=1e-12)"},{"location":"api/#yaml_nodendigits6","text":"Return the YAML configuration node for PetIBM.","title":"yaml_node(ndigits=6)"},{"location":"api/#parameters_25","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#returns_14","text":"node : dictionary Configuration node for the gridline.","title":"Returns"},{"location":"api/#_split_neededconfig","text":"Check if need to split a configuration into uniform and stretched. We only to split the configuration is the last width is bigger than the target maximum width.","title":"_split_needed(config)"},{"location":"api/#parameters_26","text":"config : dict Configuration of the segment to split.","title":"Parameters"},{"location":"api/#returns_15","text":"bool True is splitting is needed.","title":"Returns"},{"location":"api/#_split_uniform_and_stretchconfig","text":"Split configuration of a stretched portion. The configuration is split into a stretch portion and a uniform portion with a cell width equal to the maximum cell width provided.","title":"_split_uniform_and_stretch(config)"},{"location":"api/#parameters_27","text":"config : dict Configuration of the segment to split.","title":"Parameters"},{"location":"api/#returns_16","text":"dict, dict Configurations for the stretched and uniform sub-segments.","title":"Returns"},{"location":"api/#segment","text":"class Segment() Contain information about a segment of a gridline.","title":"Segment"},{"location":"api/#__init__confignone_2","text":"Initialize the segment.","title":"__init__(config=None)"},{"location":"api/#parameters_28","text":"config : dictionary (optional) Configuration of the segment to create; default: None.","title":"Parameters"},{"location":"api/#__repr__ndigits6_2","text":"Representation of the segment.","title":"__repr__(ndigits=6)"},{"location":"api/#parameters_29","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#createconfig_2","text":"Create the segment.","title":"create(config)"},{"location":"api/#parameters_30","text":"config : dictionary Configuration of the segment.","title":"Parameters"},{"location":"api/#asarray","text":"Return the segment as a 1D NumPy array of floats.","title":"asarray()"},{"location":"api/#yaml_nodendigits6_1","text":"Return the YAML configuration node for PetIBM.","title":"yaml_node(ndigits=6)"},{"location":"api/#parameters_31","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#returns_17","text":"node : dictionary Configuration node for the segment.","title":"Returns"},{"location":"api/#read_grid_hdf5filepath-name","text":"Read a grid from HDF5 file.","title":"read_grid_hdf5(filepath, name)"},{"location":"api/#parameters_32","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid.","title":"Parameters"},{"location":"api/#returns_18","text":"x : numpy.ndarray The x-coordinates along a gridline in the x-direction. y : numpy.ndarray The y-coordinates along a gridline in the y-direction. z : numpy.ndarray The z-coordinates along a gridline in the z-direction.","title":"Returns"},{"location":"api/#write_grid_hdf5filepath-name-grid","text":"Write a grid to a HDF5 file.","title":"write_grid_hdf5(filepath, name, *grid)"},{"location":"api/#parameters_33","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid. grid : tuple of numpy.ndarray objects The gridline coordinates as 1D arrays of floats.","title":"Parameters"},{"location":"api/#petibmpyqcriterion","text":"Module with functions to compute the Q-criterion","title":"petibmpy.qcriterion"},{"location":"api/#qcriterionvelocity-grid","text":"Compute the Q-criterion on a 3D grid.","title":"qcriterion(velocity, grid)"},{"location":"api/#parameters_34","text":"velocity : tuple of numpy.ndarray objects The velocity vector field given as (u, v, w). grid : tuple of numpy.ndarray objects The structured Cartesian grid given as (x, y, z).","title":"Parameters"},{"location":"api/#returns_19","text":"qcrit : numpy.ndarray Value of the Q-criterion on the 3D grid.","title":"Returns"},{"location":"api/#petibmpyprobes","text":"Module for PetIBM probes.","title":"petibmpy.probes"},{"location":"api/#_probebase","text":"class _ProbeBase(object) Base class for a probe.","title":"_ProbeBase"},{"location":"api/#_type","text":"","title":"_type"},{"location":"api/#__init__name-field-viewerhdf5-pathnone-n_monitornone-n_sumnone-t_startnone-t_endnone","text":"Initialize a base probe.","title":"__init__(name, field, viewer='hdf5', path=None, n_monitor=None, n_sum=None, t_start=None, t_end=None)"},{"location":"api/#parameters_35","text":"name : str Name of the probe field : str Name of the field variable to monitor viewer : str, optional Type of viewer, by default 'hdf5' path : pathlib.Path or str, optional Path of the output file, by default None n_monitor : int, optional Monitoring frequency, by default None n_sum : int, optional Number of time steps to average, by default None t_start : float, optional Starting time of monitoring, by default None t_end : float, optional Ending time of monitoring, by default None","title":"Parameters"},{"location":"api/#__repr__","text":"Return the string representation.","title":"__repr__()"},{"location":"api/#returns_20","text":"str The string representation.","title":"Returns"},{"location":"api/#set_viewerviewerhdf5-pathnone","text":"Set the output viewer type and path. The path is relative to the PetIBM output directory.","title":"set_viewer(viewer='hdf5', path=None)"},{"location":"api/#parameters_36","text":"viewer : str, optional Type of viewer, choices are 'hdf5' or 'ascii', by default 'hdf5' path : pathlib.Path or str, optional Path of the output file, by default None","title":"Parameters"},{"location":"api/#_get_yaml_node","text":"","title":"_get_yaml_node()"},{"location":"api/#probevolume","text":"class ProbeVolume(_ProbeBase) Class for a volume probe (monitoring solution in sub-volume).","title":"ProbeVolume"},{"location":"api/#_type_1","text":"","title":"_type"},{"location":"api/#__init__name-field-boxnone-adjust_boxfalse-gridnone-kwargs","text":"Initialize a volume probe.","title":"__init__(name, field, box=None, adjust_box=False, grid=None, **kwargs)"},{"location":"api/#parameters_37","text":"name : str Name of the probe field : str Name of the field variable to monitor box : list or numpy.ndarray, optional Limits of the box, by default None adjust_box : bool, optional Adjust the box given a grid, by default False grid : list or numpy.ndarray, optional The grid of the field, by default None **kwargs: dict, optional Optional arguments passed to the base class constructor","title":"Parameters"},{"location":"api/#__repr___1","text":"Return the string representation.","title":"__repr__()"},{"location":"api/#returns_21","text":"str The string representation","title":"Returns"},{"location":"api/#_check_typecls-ptype","text":"Check if probe type matches class type.","title":"_check_type(cls, ptype)"},{"location":"api/#parameters_38","text":"ptype : str Type of the probe","title":"Parameters"},{"location":"api/#returns_22","text":"bool True if type is 'VOLUME'","title":"Returns"},{"location":"api/#_get_yaml_nodendigits6-kwargs","text":"","title":"_get_yaml_node(ndigits=6, **kwargs)"},{"location":"api/#adjust_boxgrid-boxnone","text":"Adjust the box so that limits lie between two grid points.","title":"adjust_box(grid, box=None)"},{"location":"api/#parameters_39","text":"grid : list or numpy.ndarray The grid of the field to minotor box : list or numpy.ndarray, optional Estimated limits of the box, by default None","title":"Parameters"},{"location":"api/#read_hdf5filepath-time-ndigits6","text":"Read the probe from a HDF5 file at a given time.","title":"read_hdf5(filepath, time, ndigits=6)"},{"location":"api/#parameters_40","text":"filepath : pathlib.Path or str Path of file with the solution of the probe time : float Time value ndigits : int, optional Number of digits to round the time value, by default 6","title":"Parameters"},{"location":"api/#returns_23","text":"tuple The mesh grid of the probe numpy.ndarray The probe values","title":"Returns"},{"location":"api/#read_hdf5_deprecatedfilepath-time-ndigits6","text":"Read the probe from a HDF5 file at a given time. Method is deprecated and will be removed in next release.","title":"read_hdf5_deprecated(filepath, time, ndigits=6)"},{"location":"api/#parameters_41","text":"filepath : pathlib.Path or str Path of file with the solution of the probe time : float Time value ndigits : int, optional Number of digits to round the time value, by default 6","title":"Parameters"},{"location":"api/#returns_24","text":"tuple The mesh grid of the probe numpy.ndarray The probe values","title":"Returns"},{"location":"api/#probepoint","text":"class ProbePoint(_ProbeBase) Class to monitor a field at a single point.","title":"ProbePoint"},{"location":"api/#_type_2","text":"","title":"_type"},{"location":"api/#__init__name-field-locnone-kwargs","text":"Initialize a point probe.","title":"__init__(name, field, loc=None, **kwargs)"},{"location":"api/#parameters_42","text":"name : str Name of the probe field : str Name of the field to monitor loc : list or numpy.ndarray, optional Coordinates of the point to monitor, by default None **kwargs: dict, optional Optional arguments passed to the base class constructor","title":"Parameters"},{"location":"api/#__repr___2","text":"Return the string representation.","title":"__repr__()"},{"location":"api/#returns_25","text":"str The string representation","title":"Returns"},{"location":"api/#_check_typecls-ptype_1","text":"Check if probe type matches class type.","title":"_check_type(cls, ptype)"},{"location":"api/#parameters_43","text":"ptype : str Type of the probe","title":"Parameters"},{"location":"api/#returns_26","text":"bool True if type is 'POINT'","title":"Returns"},{"location":"api/#set_locloc","text":"Set the coordinates of the point to monitor.","title":"set_loc(loc)"},{"location":"api/#parameters_44","text":"loc : list or numpy.ndarray Coordinates of the point","title":"Parameters"},{"location":"api/#_get_yaml_nodekwargs","text":"","title":"_get_yaml_node(**kwargs)"},{"location":"api/#probeptype-args-kwargs","text":"Create a probe.","title":"Probe(ptype, *args, **kwargs)"},{"location":"api/#parameters_45","text":"ptype : str Type of the probe, choices are 'VOLUME' or 'POINT'","title":"Parameters"},{"location":"api/#returns_27","text":"ProbeVolume or ProbePoint The probe","title":"Returns"},{"location":"api/#raises","text":"ValueError Type is neither 'VOLUME' nor 'POINT'","title":"Raises"},{"location":"api/#probes_yaml_dumpprobes-filepath-modew","text":"Save the probes configuration in a YAML file.","title":"probes_yaml_dump(probes, filepath, mode='w')"},{"location":"api/#parameters_46","text":"probes : list The list of probes filepath : pathlib.Path or str Path of the YAML file mode : str, optional Mode to open file, choices are 'w' or 'a', by default 'w'","title":"Parameters"},{"location":"api/#petibmpyvorticit","text":"Module with functions to compute the vorticity.","title":"petibmpy.vorticit"},{"location":"api/#gradientu-grid-axis0","text":"Compute the gradient of u along a given axis.","title":"gradient(u, grid, axis=0)"},{"location":"api/#parameters_47","text":"u : numpy.ndarray An N-dimensional array. grid : tuple of N 1-D arrays Grid on which u is defined. axis : int, optional Axis along which to compute the gradient, by default 0.","title":"Parameters"},{"location":"api/#returns_28","text":"numpy.ndarray The N-dimensional gradient of u along a given axis. tuple of N 1-D arrays The grid on which is defined the gradient.","title":"Returns"},{"location":"api/#_gradientu-x","text":"","title":"_gradient(u, x)"},{"location":"api/#compute_wxv-w-grid_v-grid_w","text":"Compute the x-component of the vorticity field.","title":"compute_wx(v, w, grid_v, grid_w)"},{"location":"api/#parameters_48","text":"v : numpy.ndarray y-component of the velocity field as a N-dimensional array. w : numpy.ndarray z-component of the velocity field as a N-dimensional array. grid_v : tuple of N 1-D arrays Grid on which the y-velocity is defined. grid_w : tuple of N 1-D arrays Grid on which the z-velocity is defined.","title":"Parameters"},{"location":"api/#returns_29","text":"numpy.ndarray x-component of the vorticity field. tuple of N 1-D arrays Grid on which the x-vorticity is defined.","title":"Returns"},{"location":"api/#compute_wyu-w-grid_u-grid_w","text":"Compute the y-component of the vorticity field.","title":"compute_wy(u, w, grid_u, grid_w)"},{"location":"api/#parameters_49","text":"u : numpy.ndarray x-component of the velocity field as a N-dimensional array. w : numpy.ndarray z-component of the velocity field as a N-dimensional array. grid_x : tuple of N 1-D arrays Grid on which the x-velocity is defined. grid_w : tuple of N 1-D arrays Grid on which the z-velocity is defined.","title":"Parameters"},{"location":"api/#returns_30","text":"numpy.ndarray y-component of the vorticity field. tuple of N 1-D arrays Grid on which the y-vorticity is defined.","title":"Returns"},{"location":"api/#compute_wzu-v-grid_u-grid_v","text":"Compute the z-component of the vorticity field.","title":"compute_wz(u, v, grid_u, grid_v)"},{"location":"api/#parameters_50","text":"u : numpy.ndarray x-component of the velocity field as a N-dimensional array. v : numpy.ndarray y-component of the velocity field as a N-dimensional array. grid_u : tuple of N 1-D arrays Grid on which the x-velocity is defined. grid_v : tuple of N 1-D arrays Grid on which the y-velocity is defined.","title":"Parameters"},{"location":"api/#returns_31","text":"numpy.ndarray z-component of the vorticity field. tuple of N 1-D arrays Grid on which the z-vorticity is defined.","title":"Returns"},{"location":"api/#petibmpyrotate","text":"Module with function to rotate a geometry.","title":"petibmpy.rotate"},{"location":"api/#rotate2dx-y-center00-00-angle00-modedeg","text":"Rotate (x, y) coordinates around a center.","title":"rotate2d(x, y, center=(0.0, 0.0), angle=0.0, mode='deg')"},{"location":"api/#parameters_51","text":"x : numpy.ndarray of floats The x-coordinates to rotate. y : numpy.ndarray of floats The y-coordinates to rotate. center : 2-tuple of floats, optional The center of rotation; default: (0.0, 0.0). angle : float, optional The angle of rotation; default: 0.0. mode : string, optional Whether angle is provided in degrees or in radians; choices: 'deg', 'rad'; default: 'deg'.","title":"Parameters"},{"location":"api/#returns_32","text":"x_new : numpy.ndarray of floats The rotated x-coordinates. y_new : numpy.ndarray of floats The rotated y-coordinates.","title":"Returns"},{"location":"api/#rotate3dx-y-z-roll00-yaw00-pitch00-center00-00-00","text":"Rotate 3D point.","title":"rotate3d(x, y, z, roll=0.0, yaw=0.0, pitch=0.0, center=(0.0, 0.0, 0.0))"},{"location":"api/#parameters_52","text":"x : float x-coordinate of point. y : float y-coordinate of point. z : float z-coordinate of point. roll : float (optional) Roll angle (in radians); default: 0.0. yaw : float (optional) Yaw angle (in radians); default: 0.0. pitch : float (optional) Pitch angle (in radians); default: 0.0. center : tuple of floats Coordinates of the center of rotation; default: [0.0, 0.0, 0.0].","title":"Parameters"},{"location":"api/#returns_33","text":"xr : float x-coordinate of rotated point. yr : float y-coordinate of rotated point. zr : float z-coordinate of rotated point.","title":"Returns"},{"location":"api/#rotate3d_vec","text":"","title":"rotate3d_vec"},{"location":"api/#petibmpycreatexdmf","text":"Module to create a XDMF file for a PetIBM field variable.","title":"petibmpy.createxdmf"},{"location":"api/#write_xdmfoutpath-datadir-gridpath-name-nstartnone-ntnone-nsavenone-statesnone-timesnone","text":"Write a XDMF file to read the solution of a PetIBM variable.","title":"write_xdmf(outpath, datadir, gridpath, name, nstart=None, nt=None, nsave=None, states=None, times=None)"},{"location":"api/#parameters_53","text":"outpath : pathlib.Path object Path of the XDMF file to create. datadir : pathlib.Path object Data directory. gridpath : pathlib.Path object Path of the file containing the gridline coordinates. name : string Name of the field variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None.","title":"Parameters"},{"location":"api/#write_xdmf_multioutpath-config-nstartnone-ntnone-nsavenone-statesnone-timesnone","text":"Write a XDMF file to read the solution of multiple PetIBM variables.","title":"write_xdmf_multi(outpath, config, nstart=None, nt=None, nsave=None, states=None, times=None)"},{"location":"api/#parameters_54","text":"outpath : pathlib.Path object Path of the XDMF file to create. config : dictionary Should contains two keys: 'grid' and 'data'. The value mapped to 'grid' is the path of the HDF5 grid file. The value mapped to 'data' is a dictionary. Each item of the 'data' dictionary is labeled with the name of the variable to add to the XDMF file that is mapped to the path of the directory that contains the numerical solution for that variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None.","title":"Parameters"},{"location":"changelog/","text":"Change Log Current development Added Documentation with Mkdocs (built on gh-pages using doctr during Travis CI job). Code coverage with coveralls. Unit-tests. Module to parse a PETSc log view file. Function to interpolate a 2D field from one grid to another. Module to create probes (volume and point) and to load data from files. Mesh feature to split the configuration of a stretched segment into two sub-configurations: one for a stretched segment where the maximum grid spacing is enforced, followed by one for a uniform segment (with a grid spacing equal to the maximum spacing of the previous stretched segment). CartesianGrid method to plot the gridlines of a mesh in a Matplotlib figure. CartesianGrid method to print some information about the grid spacings of a mesh (min, max, ratio). Functions to compute vorticity components. Function to delete datasets from a HDF5 file. Changed Update package version of dependencies. (ProbeVolume) Read index set from HDF5 file and re-arrange sub-volume values (using the index set). Previous method is deprecated ( ProbeVolume.read_hdf5_deprecated_ ) and will be removed in the next release. Fixed Removed 0.1 Added Add modules with PEP8-compliant style. Add configuration file for Travis CI. Changed Fixed Removed","title":"Changelog"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#current-development","text":"","title":"Current development"},{"location":"changelog/#added","text":"Documentation with Mkdocs (built on gh-pages using doctr during Travis CI job). Code coverage with coveralls. Unit-tests. Module to parse a PETSc log view file. Function to interpolate a 2D field from one grid to another. Module to create probes (volume and point) and to load data from files. Mesh feature to split the configuration of a stretched segment into two sub-configurations: one for a stretched segment where the maximum grid spacing is enforced, followed by one for a uniform segment (with a grid spacing equal to the maximum spacing of the previous stretched segment). CartesianGrid method to plot the gridlines of a mesh in a Matplotlib figure. CartesianGrid method to print some information about the grid spacings of a mesh (min, max, ratio). Functions to compute vorticity components. Function to delete datasets from a HDF5 file.","title":"Added"},{"location":"changelog/#changed","text":"Update package version of dependencies. (ProbeVolume) Read index set from HDF5 file and re-arrange sub-volume values (using the index set). Previous method is deprecated ( ProbeVolume.read_hdf5_deprecated_ ) and will be removed in the next release.","title":"Changed"},{"location":"changelog/#fixed","text":"","title":"Fixed"},{"location":"changelog/#removed","text":"","title":"Removed"},{"location":"changelog/#01","text":"","title":"0.1"},{"location":"changelog/#added_1","text":"Add modules with PEP8-compliant style. Add configuration file for Travis CI.","title":"Added"},{"location":"changelog/#changed_1","text":"","title":"Changed"},{"location":"changelog/#fixed_1","text":"","title":"Fixed"},{"location":"changelog/#removed_1","text":"","title":"Removed"},{"location":"contributing/","text":"How to contribute to petibmpy Welcome to the developer's guide of petibmpy! Adding new features and fixing bugs All new features and bug fixes must go through a pull-request review procedure. If you want to contribute to petibmpy, please fork the main petibmpy repository, make your changes on your fork, and then open a pull-request. For new features and minor bugs (with small impact), the base branch of the pull-request should be the develop branch of the main repository. (The develop branch will be merged into the master one once we are ready for a new release of petibmpy.) For major bugs, the base branch should be the master branch of the main repository; it will be considered as a hotfix (bugfix) and a new version of petibmpy will be released as soon as possible by the maintainers with the micro number incremented. New features should come with some kind of test or example to verify and/or validate the implementation. Reporting bugs and requesting new features To report bugs, request new features, or simply ask questions, please open a GitHub issue on the main repository. Writing documentation New classes, methods, and functions must be documented with doctrings. You should also add code documentation whenever necessary; it will greatly help other developers to review your new features and bug fixes.","title":"Contributing"},{"location":"contributing/#how-to-contribute-to-petibmpy","text":"Welcome to the developer's guide of petibmpy!","title":"How to contribute to petibmpy"},{"location":"contributing/#adding-new-features-and-fixing-bugs","text":"All new features and bug fixes must go through a pull-request review procedure. If you want to contribute to petibmpy, please fork the main petibmpy repository, make your changes on your fork, and then open a pull-request. For new features and minor bugs (with small impact), the base branch of the pull-request should be the develop branch of the main repository. (The develop branch will be merged into the master one once we are ready for a new release of petibmpy.) For major bugs, the base branch should be the master branch of the main repository; it will be considered as a hotfix (bugfix) and a new version of petibmpy will be released as soon as possible by the maintainers with the micro number incremented. New features should come with some kind of test or example to verify and/or validate the implementation.","title":"Adding new features and fixing bugs"},{"location":"contributing/#reporting-bugs-and-requesting-new-features","text":"To report bugs, request new features, or simply ask questions, please open a GitHub issue on the main repository.","title":"Reporting bugs and requesting new features"},{"location":"contributing/#writing-documentation","text":"New classes, methods, and functions must be documented with doctrings. You should also add code documentation whenever necessary; it will greatly help other developers to review your new features and bug fixes.","title":"Writing documentation"}]}