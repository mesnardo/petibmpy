{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PetibmPy: Python processing tools for PetIBM Small Python package to perform pre- and post-processing steps for PetIBM . Dependencies PetIBM (last tested: 0.4.1 ) Python ( 3.6.8 ) H5Py ( 2.9.0 ) lxml ( 4.3.1 ) Matplotlib ( 3.0.2 ) NumPy ( 1.16.2 ) Pyyaml ( 3.13 ) SciPy ( 1.2.1 ) Installation With Anaconda: conda env create --name=py36-petibmpy --file=environment.yaml conda activate py36-petibmpy python setup.py develop Contact Please e-mail Olivier Mesnard if you have any questions, suggestions, or feedback. To report bugs, please use the GitHub issue tracking system. We also welcome pull-requests.","title":"Home"},{"location":"#petibmpy-python-processing-tools-for-petibm","text":"Small Python package to perform pre- and post-processing steps for PetIBM .","title":"PetibmPy: Python processing tools for PetIBM"},{"location":"#dependencies","text":"PetIBM (last tested: 0.4.1 ) Python ( 3.6.8 ) H5Py ( 2.9.0 ) lxml ( 4.3.1 ) Matplotlib ( 3.0.2 ) NumPy ( 1.16.2 ) Pyyaml ( 3.13 ) SciPy ( 1.2.1 )","title":"Dependencies"},{"location":"#installation","text":"With Anaconda: conda env create --name=py36-petibmpy --file=environment.yaml conda activate py36-petibmpy python setup.py develop","title":"Installation"},{"location":"#contact","text":"Please e-mail Olivier Mesnard if you have any questions, suggestions, or feedback. To report bugs, please use the GitHub issue tracking system. We also welcome pull-requests.","title":"Contact"},{"location":"api/","text":"Table of Contents petibmpy petibmpy.probes read_probe_volume_hdf5 get_probe_volume_limits petibmpy.misc Sequence _represent_dictionary_order _represent_limits setup_yaml petibmpy.forces read_forces get_force_coefficients get_time_averaged_values petibmpy.version _version_major _version_minor _version_micro _version_extra _ver __version__ CLASSIFIERS description long_description NAME MAINTAINER MAINTAINER_EMAIL DESCRIPTION LONG_DESCRIPTION URL DOWNLOAD_URL LICENSE AUTHOR AUTHOR_EMAIL PLATFORMS MAJOR MINOR MICRO VERSION PACKAGES PACKAGE_DATA REQUIRES petibmpy.field read_field_hdf5 write_field_hdf5 linear_interpolation interpolate3d interpolate2d petibmpy.extrude extrude2d petibmpy.rotate rotate2d rotate3d rotate3d_vec petibmpy.qcriterion qcriterion petibmpy.regularize get_perimeter regularize2d petibmpy.grid CartesianGrid GridLine Segment read_grid_hdf5 write_grid_hdf5 petibmpy.bod write_body read_body petibmpy.createxdmf write_xdmf write_xdmf_multi petibmpy petibmpy.probes Module for the PetIBM probes. read_probe_volume_hdf5() def read_probe_volume_hdf5(filepath, name, time) Read a volume field from file at a given recorded time. Parameters filepath : pathlib.Path or string Path of the file to read from. name : string Name of the field to read. time : float Time value at which the volume field was recorded. Returns mesh : tuple of numpy.ndarray objects The gridline coordinates of the volume. values : numpy.ndarray The volume field. get_probe_volume_limits() def get_probe_volume_limits(x, loc, neighbors=1, btype='both', decimals=6) Return the interval limits (left, right, or both). Parameters x : 1D numpy.ndarray The gridline coordinates. loc : float Location for which to request the gridline boundaries. neighbors : integer (optional) Number of neighbors to include as a buffer; default: 1. btype : string (optional) Type of boundary to return; choices: 'left', 'right, or 'both'; default: 'both'. decimals : integer (optional) Number of digits used to round numbers; default: 6. Returns 'left', 'right', or 'both' gridline boundaries. petibmpy.misc Collection of miscellaneous functions and classes. Sequence Objects Dummy class to store list/tuple in YAML file in pretty format. _represent_dictionary_order() def _represent_dictionary_order(self, dict_data) Pretty output of dictionary to YAML file. _represent_limits() def _represent_limits(self, data) Pretty output of list/tuple to YAML file. setup_yaml() def setup_yaml() Configure output format to YAML file. petibmpy.forces Module with functions to process forces.. read_forces() def read_forces(filepaths) Read PetIBM forces from given file(s). If multiple files are provided, the histories are concatenated. Parameters filepaths : tuple of pathlib.Path objects or strings Path of the files to load the history from. Returns data : numpy.ndarray Time followed by the forces in the x, y, and z directions. get_force_coefficients() def get_force_coefficients(forces, *,, ,, =) Convert forces to force coefficients. Parameters forces : tuple of numpy.ndarray objects The forces. coeff : float (optional) The scaling coefficient; default: 1.0. Returns force_coeffs : tuple of numpy.ndarray objects The force coefficients. get_time_averaged_values() def get_time_averaged_values(t, forces, *,, ,, =) Compute the time-averaged values. Parameters t : numpy.ndarray object The time values. forces : tuple of numpy.ndarray objects The forces (or force coefficients). limits : tuple of 2 floats (optional) Time limits used to compute the mean; default: (-inf, +inf). Returns means : tuple of floats The time-averaged values. petibmpy.version Set up the version. _version_major _version_major = 0 _version_minor _version_minor = 1 _version_micro _version_micro = '' _version_extra _version_extra = '' _ver _ver = [_version_major, _version_minor] __version__ __version__ = '.'.join(map(str, _ver)) CLASSIFIERS CLASSIFIERS = ['Development Status :: 1 - Alpha', 'Environment :: Console', 'License ... description description = 'PetibmPy: Python processing tools for PetIBM' long_description long_description = \"\"\" PetibmPy ======== Python processing tools for PetIBM. License ======= PetibmPy is licensed unde ... NAME NAME = 'PetibmPy' MAINTAINER MAINTAINER = 'Olivier Mesnard' MAINTAINER_EMAIL MAINTAINER_EMAIL = 'mesnardo@gwu.edu' DESCRIPTION DESCRIPTION = description LONG_DESCRIPTION LONG_DESCRIPTION = long_description URL URL = 'https://github.com/mesnardo/petibmpy' DOWNLOAD_URL DOWNLOAD_URL = '' LICENSE LICENSE = 'BSD 3-Clause' AUTHOR AUTHOR = '' AUTHOR_EMAIL AUTHOR_EMAIL = '' PLATFORMS PLATFORMS = 'Unix' MAJOR MAJOR = _version_major MINOR MINOR = _version_minor MICRO MICRO = _version_micro VERSION VERSION = __version__ PACKAGES PACKAGES = ['petibmpy'] PACKAGE_DATA PACKAGE_DATA = {'petibmpy': [os.path.join('styles', '*')]} REQUIRES REQUIRES = ['h5py', 'lxml', 'matplotlib', 'numpy', 'pyyaml', 'scipy'] petibmpy.field Module to read/write a PetIBM field variable. read_field_hdf5() def read_field_hdf5(filepath, name) Read a field from HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable. Returns field : numpy.ndarray The PetIBM field variable as a NumPy array of floats. write_field_hdf5() def write_field_hdf5(filepath, name, field) Write a field to a HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable. field : numpy.ndarray The PetIBM field variable as a NumPy array of floats. linear_interpolation() def linear_interpolation(u, x, xi) Perform a linear interpolation along the first axis. Parameters u : numpy.ndarray Array to interpolate. x : numpy.ndarray Gridline locations. xi : float Target location. Returns ui : numpy.ndarray or float Interpolated values. interpolate3d() def interpolate3d(field, grid1, grid2, kwargs) Interpolate a 3D field from one grid to another. Parameters field : numpy.ndarray The 3D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y, z). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y, z). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn. Returns field2 : numpy.ndarray The interpolated 3D field. interpolate2d() def interpolate2d(field, grid1, grid2, kwargs) Interpolate a 2D field from one grid to another. Parameters field : numpy.ndarray The 2D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn. Returns field2 : numpy.ndarray The interpolated 2D field. petibmpy.extrude Module with function to extrude a 2D geometry in the third direction. extrude2d() def extrude2d(x, y, limits=[-0.5, 0.5], n=None, ds=None, force=False) Extrude the two-dimensional section along the third direction (z). Parameters x : numpy.ndarray x-coordinates of the section. y : numpy.ndarray y-coordinates of the section. limits : 2-list of floats, optional Limits of the extrusion; default: [-0.5, 0.5]. n : integer, optional Number of divisions in the z-direction; default: None. ds : float, optional Desired segment-length; default: None. force : boolean, optional Forces the extrusion to the limits prescribed; default: False. Returns x : numpy.ndarray x-coordinates of the geometry. y : numpy.ndarray y-coordinates of the geometry. z : numpy.ndarray z-coordinates of the geometry. petibmpy.rotate Module with function to rotate a geometry. rotate2d() def rotate2d(x, y, center=(0.0, 0.0), angle=0.0, mode='deg') Rotate (x, y) coordinates around a center. Parameters x : numpy.ndarray of floats The x-coordinates to rotate. y : numpy.ndarray of floats The y-coordinates to rotate. center : 2-tuple of floats, optional The center of rotation; default: (0.0, 0.0). angle : float, optional The angle of rotation; default: 0.0. mode : string, optional Whether angle is provided in degrees or in radians; choices: 'deg', 'rad'; default: 'deg'. Returns x_new : numpy.ndarray of floats The rotated x-coordinates. y_new : numpy.ndarray of floats The rotated y-coordinates. rotate3d() def rotate3d(x, y, z, roll=0.0, yaw=0.0, pitch=0.0, center=(0.0, 0.0, 0.0)) Rotate 3D point. Parameters x : float x-coordinate of point. y : float y-coordinate of point. z : float z-coordinate of point. roll : float (optional) Roll angle (in radians); default: 0.0. yaw : float (optional) Yaw angle (in radians); default: 0.0. pitch : float (optional) Pitch angle (in radians); default: 0.0. center : tuple of floats Coordinates of the center of rotation; default: [0.0, 0.0, 0.0]. Returns xr : float x-coordinate of rotated point. yr : float y-coordinate of rotated point. zr : float z-coordinate of rotated point. rotate3d_vec rotate3d_vec = numpy.vectorize(rotate3d, excluded=['roll', 'yaw', 'pitch', 'center'] ... petibmpy.qcriterion Module with functions to compute the Q-criterion qcriterion() def qcriterion(velocity, grid) Compute the Q-criterion on a 3D grid. Parameters velocity : tuple of numpy.ndarray objects The velocity vector field given as (u, v, w). grid : tuple of numpy.ndarray objects The structured Cartesian grid given as (x, y, z). Returns qcrit : numpy.ndarray Value of the Q-criterion on the 3D grid. petibmpy.regularize Module with function to regularize a 2D curve (with uniform resolution). get_perimeter() def get_perimeter(x, y) Return the perimeter of the geometry. Parameters x : numpy.ndarray x-coordinate of the points along the curve. y : numpy.ndarray y-coordinate of the points along the curve. Returns perimeter : float The perimeter. regularize2d() def regularize2d(xo, yo, N=None, ds=None, atol=1.0E-06) Regularize the geometry. Parameters xo: numpy.ndarray of floats The x-coordinates of the boundary to regularize. yo: numpy.ndarray of floats The y-coordinates of the boundary to regularize. N: integer, optional Number of divisions; default: None. ds: float, optional Desired segment-length; default: None. atol: float, optional Desired tolerance for discretization; default: 1.0E-06. Returns x: numpy.ndarray of floats The x-coordinates of the regularized boundary. y: numpy.ndarray of floats The y-coordinates of the regularized boundary. petibmpy.grid Module to create/read/write a PetIBM grid. CartesianGrid Objects def __init__(self, config=None) Contain information about a structured Cartesian grid. CartesianGrid.__init__() def __init__(self, config=None) Initialize the grid. Parameters config : dictionary (optional) Configuration of the grid to create; default: None. CartesianGrid.__repr__() def __repr__(self, ndigits=6) Representation of the grid. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. CartesianGrid.create() def create(self, config) Create the grid. Parameters config : dictionary Configuration of the grid. CartesianGrid.get_number_cells() def get_number_cells(self) Return the number of cells in the grid. CartesianGrid.get_gridlines() def get_gridlines(self) Return the gridlines as a list of 1D NumPy arrays of floats. CartesianGrid.write_hdf5() def write_hdf5(self, filepath) Save the grid into HDF5 file. Parameters filepath : pathlib.Path or string Path of the HDF5 file to write into. CartesianGrid.write_yaml() def write_yaml(self, filepath, ndigits=6) Write the YAML configuration node for PetIBM. Parameters filepath : pathlib.Path or string Path of the YAML file to write into. ndigits : integer (optional) Number of digits to represent floats; default: 6. GridLine Objects def __init__(self, config=None) Contain information about a gridline of a structured Cartesian grid. GridLine.__init__() def __init__(self, config=None) Initialize the gridline. Parameters config : dictionary (optional) Configuration of the gridline to create; default: None. GridLine.__repr__() def __repr__(self, ndigits=6) Representation of the gridline. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. GridLine.create() def create(self, config) Create the gridline. Parameters config : dictionary Configuration of the gridline. GridLine.get_size() def get_size(self) Return the number of vertices in the gridline. GridLine.asarray() def asarray(self) Return the gridline as a 1D NumPy array of floats. GridLine.yaml_node() def yaml_node(self, ndigits=6) Return the YAML configuration node for PetIBM. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. Returns node : dictionary Configuration node for the gridline. Segment Objects def __init__(self, config=None) Contain information about a segment of a gridline. Segment.__init__() def __init__(self, config=None) Initialize the segment. Parameters config : dictionary (optional) Configuration of the segment to create; default: None. Segment.__repr__() def __repr__(self, ndigits=6) Representation of the segment. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. Segment.create() def create(self, config) Create the segment. Parameters config : dictionary Configuration of the segment. Segment.asarray() def asarray(self) Return the segment as a 1D NumPy array of floats. Segment.yaml_node() def yaml_node(self, ndigits=6) Return the YAML configuration node for PetIBM. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. Returns node : dictionary Configuration node for the segment. read_grid_hdf5() def read_grid_hdf5(filepath, name) Read a grid from HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid. Returns x : numpy.ndarray The x-coordinates along a gridline in the x-direction. y : numpy.ndarray The y-coordinates along a gridline in the y-direction. z : numpy.ndarray The z-coordinates along a gridline in the z-direction. write_grid_hdf5() def write_grid_hdf5(filepath, name, grid) Write a grid to a HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid. grid : tuple of numpy.ndarray objects The gridline coordinates as 1D arrays of floats. petibmpy.bod Module with I/O functions for immersed body. write_body() def write_body(filepath, coords) Save the boundary coordinates to a file. Parameters filepath : pathlib.Path object or string Path of the file to write. coords : tuple of lists or numpy.ndarray objects The x, y, and z coordinates of the boundary. read_body() def read_body(filepath, kwargs) Read the boundary coordinates from a file. Parameters filepath : pathlib.Path object or string Path of the file to read. kwargs : dictionary Keyword arguments to pass to numpy.loadtxt. Returns coords : numpy.ndarray The boundary coordinates. petibmpy.createxdmf Module to create a XDMF file for a PetIBM field variable. write_xdmf() def write_xdmf(outpath, datadir, gridpath, name, nstart=None, nt=None, nsave=None, states=None, times=None) Write a XDMF file to read the solution of a PetIBM variable. Parameters outpath : pathlib.Path object Path of the XDMF file to create. datadir : pathlib.Path object Data directory. gridpath : pathlib.Path object Path of the file containing the gridline coordinates. name : string Name of the field variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None. write_xdmf_multi() def write_xdmf_multi(outpath, config, nstart=None, nt=None, nsave=None, states=None, times=None) Write a XDMF file to read the solution of multiple PetIBM variables. Parameters outpath : pathlib.Path object Path of the XDMF file to create. config : dictionary Should contains two keys: 'grid' and 'data'. The value mapped to 'grid' is the path of the HDF5 grid file. The value mapped to 'data' is a dictionary. Each item of the 'data' dictionary is labeled with the name of the variable to add to the XDMF file that is mapped to the path of the directory that contains the numerical solution for that variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None.","title":"API"},{"location":"api/#table-of-contents","text":"petibmpy petibmpy.probes read_probe_volume_hdf5 get_probe_volume_limits petibmpy.misc Sequence _represent_dictionary_order _represent_limits setup_yaml petibmpy.forces read_forces get_force_coefficients get_time_averaged_values petibmpy.version _version_major _version_minor _version_micro _version_extra _ver __version__ CLASSIFIERS description long_description NAME MAINTAINER MAINTAINER_EMAIL DESCRIPTION LONG_DESCRIPTION URL DOWNLOAD_URL LICENSE AUTHOR AUTHOR_EMAIL PLATFORMS MAJOR MINOR MICRO VERSION PACKAGES PACKAGE_DATA REQUIRES petibmpy.field read_field_hdf5 write_field_hdf5 linear_interpolation interpolate3d interpolate2d petibmpy.extrude extrude2d petibmpy.rotate rotate2d rotate3d rotate3d_vec petibmpy.qcriterion qcriterion petibmpy.regularize get_perimeter regularize2d petibmpy.grid CartesianGrid GridLine Segment read_grid_hdf5 write_grid_hdf5 petibmpy.bod write_body read_body petibmpy.createxdmf write_xdmf write_xdmf_multi","title":"Table of Contents"},{"location":"api/#petibmpy","text":"","title":"petibmpy"},{"location":"api/#petibmpyprobes","text":"Module for the PetIBM probes.","title":"petibmpy.probes"},{"location":"api/#read_probe_volume_hdf5","text":"def read_probe_volume_hdf5(filepath, name, time) Read a volume field from file at a given recorded time.","title":"read_probe_volume_hdf5()"},{"location":"api/#parameters","text":"filepath : pathlib.Path or string Path of the file to read from. name : string Name of the field to read. time : float Time value at which the volume field was recorded.","title":"Parameters"},{"location":"api/#returns","text":"mesh : tuple of numpy.ndarray objects The gridline coordinates of the volume. values : numpy.ndarray The volume field.","title":"Returns"},{"location":"api/#get_probe_volume_limits","text":"def get_probe_volume_limits(x, loc, neighbors=1, btype='both', decimals=6) Return the interval limits (left, right, or both).","title":"get_probe_volume_limits()"},{"location":"api/#parameters_1","text":"x : 1D numpy.ndarray The gridline coordinates. loc : float Location for which to request the gridline boundaries. neighbors : integer (optional) Number of neighbors to include as a buffer; default: 1. btype : string (optional) Type of boundary to return; choices: 'left', 'right, or 'both'; default: 'both'. decimals : integer (optional) Number of digits used to round numbers; default: 6.","title":"Parameters"},{"location":"api/#returns_1","text":"'left', 'right', or 'both' gridline boundaries.","title":"Returns"},{"location":"api/#petibmpymisc","text":"Collection of miscellaneous functions and classes.","title":"petibmpy.misc"},{"location":"api/#sequence-objects","text":"Dummy class to store list/tuple in YAML file in pretty format.","title":"Sequence Objects"},{"location":"api/#_represent_dictionary_order","text":"def _represent_dictionary_order(self, dict_data) Pretty output of dictionary to YAML file.","title":"_represent_dictionary_order()"},{"location":"api/#_represent_limits","text":"def _represent_limits(self, data) Pretty output of list/tuple to YAML file.","title":"_represent_limits()"},{"location":"api/#setup_yaml","text":"def setup_yaml() Configure output format to YAML file.","title":"setup_yaml()"},{"location":"api/#petibmpyforces","text":"Module with functions to process forces..","title":"petibmpy.forces"},{"location":"api/#read_forces","text":"def read_forces(filepaths) Read PetIBM forces from given file(s). If multiple files are provided, the histories are concatenated.","title":"read_forces()"},{"location":"api/#parameters_2","text":"filepaths : tuple of pathlib.Path objects or strings Path of the files to load the history from.","title":"Parameters"},{"location":"api/#returns_2","text":"data : numpy.ndarray Time followed by the forces in the x, y, and z directions.","title":"Returns"},{"location":"api/#get_force_coefficients","text":"def get_force_coefficients(forces, *,, ,, =) Convert forces to force coefficients.","title":"get_force_coefficients()"},{"location":"api/#parameters_3","text":"forces : tuple of numpy.ndarray objects The forces. coeff : float (optional) The scaling coefficient; default: 1.0.","title":"Parameters"},{"location":"api/#returns_3","text":"force_coeffs : tuple of numpy.ndarray objects The force coefficients.","title":"Returns"},{"location":"api/#get_time_averaged_values","text":"def get_time_averaged_values(t, forces, *,, ,, =) Compute the time-averaged values.","title":"get_time_averaged_values()"},{"location":"api/#parameters_4","text":"t : numpy.ndarray object The time values. forces : tuple of numpy.ndarray objects The forces (or force coefficients). limits : tuple of 2 floats (optional) Time limits used to compute the mean; default: (-inf, +inf).","title":"Parameters"},{"location":"api/#returns_4","text":"means : tuple of floats The time-averaged values.","title":"Returns"},{"location":"api/#petibmpyversion","text":"Set up the version.","title":"petibmpy.version"},{"location":"api/#_version_major","text":"_version_major = 0","title":"_version_major"},{"location":"api/#_version_minor","text":"_version_minor = 1","title":"_version_minor"},{"location":"api/#_version_micro","text":"_version_micro = ''","title":"_version_micro"},{"location":"api/#_version_extra","text":"_version_extra = ''","title":"_version_extra"},{"location":"api/#_ver","text":"_ver = [_version_major, _version_minor]","title":"_ver"},{"location":"api/#__version__","text":"__version__ = '.'.join(map(str, _ver))","title":"__version__"},{"location":"api/#classifiers","text":"CLASSIFIERS = ['Development Status :: 1 - Alpha', 'Environment :: Console', 'License ...","title":"CLASSIFIERS"},{"location":"api/#description","text":"description = 'PetibmPy: Python processing tools for PetIBM'","title":"description"},{"location":"api/#long_description","text":"long_description = \"\"\" PetibmPy ======== Python processing tools for PetIBM. License ======= PetibmPy is licensed unde ...","title":"long_description"},{"location":"api/#name","text":"NAME = 'PetibmPy'","title":"NAME"},{"location":"api/#maintainer","text":"MAINTAINER = 'Olivier Mesnard'","title":"MAINTAINER"},{"location":"api/#maintainer_email","text":"MAINTAINER_EMAIL = 'mesnardo@gwu.edu'","title":"MAINTAINER_EMAIL"},{"location":"api/#description_1","text":"DESCRIPTION = description","title":"DESCRIPTION"},{"location":"api/#long_description_1","text":"LONG_DESCRIPTION = long_description","title":"LONG_DESCRIPTION"},{"location":"api/#url","text":"URL = 'https://github.com/mesnardo/petibmpy'","title":"URL"},{"location":"api/#download_url","text":"DOWNLOAD_URL = ''","title":"DOWNLOAD_URL"},{"location":"api/#license","text":"LICENSE = 'BSD 3-Clause'","title":"LICENSE"},{"location":"api/#author","text":"AUTHOR = ''","title":"AUTHOR"},{"location":"api/#author_email","text":"AUTHOR_EMAIL = ''","title":"AUTHOR_EMAIL"},{"location":"api/#platforms","text":"PLATFORMS = 'Unix'","title":"PLATFORMS"},{"location":"api/#major","text":"MAJOR = _version_major","title":"MAJOR"},{"location":"api/#minor","text":"MINOR = _version_minor","title":"MINOR"},{"location":"api/#micro","text":"MICRO = _version_micro","title":"MICRO"},{"location":"api/#version","text":"VERSION = __version__","title":"VERSION"},{"location":"api/#packages","text":"PACKAGES = ['petibmpy']","title":"PACKAGES"},{"location":"api/#package_data","text":"PACKAGE_DATA = {'petibmpy': [os.path.join('styles', '*')]}","title":"PACKAGE_DATA"},{"location":"api/#requires","text":"REQUIRES = ['h5py', 'lxml', 'matplotlib', 'numpy', 'pyyaml', 'scipy']","title":"REQUIRES"},{"location":"api/#petibmpyfield","text":"Module to read/write a PetIBM field variable.","title":"petibmpy.field"},{"location":"api/#read_field_hdf5","text":"def read_field_hdf5(filepath, name) Read a field from HDF5 file.","title":"read_field_hdf5()"},{"location":"api/#parameters_5","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable.","title":"Parameters"},{"location":"api/#returns_5","text":"field : numpy.ndarray The PetIBM field variable as a NumPy array of floats.","title":"Returns"},{"location":"api/#write_field_hdf5","text":"def write_field_hdf5(filepath, name, field) Write a field to a HDF5 file.","title":"write_field_hdf5()"},{"location":"api/#parameters_6","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable. field : numpy.ndarray The PetIBM field variable as a NumPy array of floats.","title":"Parameters"},{"location":"api/#linear_interpolation","text":"def linear_interpolation(u, x, xi) Perform a linear interpolation along the first axis.","title":"linear_interpolation()"},{"location":"api/#parameters_7","text":"u : numpy.ndarray Array to interpolate. x : numpy.ndarray Gridline locations. xi : float Target location.","title":"Parameters"},{"location":"api/#returns_6","text":"ui : numpy.ndarray or float Interpolated values.","title":"Returns"},{"location":"api/#interpolate3d","text":"def interpolate3d(field, grid1, grid2, kwargs) Interpolate a 3D field from one grid to another.","title":"interpolate3d()"},{"location":"api/#parameters_8","text":"field : numpy.ndarray The 3D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y, z). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y, z). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn.","title":"Parameters"},{"location":"api/#returns_7","text":"field2 : numpy.ndarray The interpolated 3D field.","title":"Returns"},{"location":"api/#interpolate2d","text":"def interpolate2d(field, grid1, grid2, kwargs) Interpolate a 2D field from one grid to another.","title":"interpolate2d()"},{"location":"api/#parameters_9","text":"field : numpy.ndarray The 2D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn.","title":"Parameters"},{"location":"api/#returns_8","text":"field2 : numpy.ndarray The interpolated 2D field.","title":"Returns"},{"location":"api/#petibmpyextrude","text":"Module with function to extrude a 2D geometry in the third direction.","title":"petibmpy.extrude"},{"location":"api/#extrude2d","text":"def extrude2d(x, y, limits=[-0.5, 0.5], n=None, ds=None, force=False) Extrude the two-dimensional section along the third direction (z).","title":"extrude2d()"},{"location":"api/#parameters_10","text":"x : numpy.ndarray x-coordinates of the section. y : numpy.ndarray y-coordinates of the section. limits : 2-list of floats, optional Limits of the extrusion; default: [-0.5, 0.5]. n : integer, optional Number of divisions in the z-direction; default: None. ds : float, optional Desired segment-length; default: None. force : boolean, optional Forces the extrusion to the limits prescribed; default: False.","title":"Parameters"},{"location":"api/#returns_9","text":"x : numpy.ndarray x-coordinates of the geometry. y : numpy.ndarray y-coordinates of the geometry. z : numpy.ndarray z-coordinates of the geometry.","title":"Returns"},{"location":"api/#petibmpyrotate","text":"Module with function to rotate a geometry.","title":"petibmpy.rotate"},{"location":"api/#rotate2d","text":"def rotate2d(x, y, center=(0.0, 0.0), angle=0.0, mode='deg') Rotate (x, y) coordinates around a center.","title":"rotate2d()"},{"location":"api/#parameters_11","text":"x : numpy.ndarray of floats The x-coordinates to rotate. y : numpy.ndarray of floats The y-coordinates to rotate. center : 2-tuple of floats, optional The center of rotation; default: (0.0, 0.0). angle : float, optional The angle of rotation; default: 0.0. mode : string, optional Whether angle is provided in degrees or in radians; choices: 'deg', 'rad'; default: 'deg'.","title":"Parameters"},{"location":"api/#returns_10","text":"x_new : numpy.ndarray of floats The rotated x-coordinates. y_new : numpy.ndarray of floats The rotated y-coordinates.","title":"Returns"},{"location":"api/#rotate3d","text":"def rotate3d(x, y, z, roll=0.0, yaw=0.0, pitch=0.0, center=(0.0, 0.0, 0.0)) Rotate 3D point.","title":"rotate3d()"},{"location":"api/#parameters_12","text":"x : float x-coordinate of point. y : float y-coordinate of point. z : float z-coordinate of point. roll : float (optional) Roll angle (in radians); default: 0.0. yaw : float (optional) Yaw angle (in radians); default: 0.0. pitch : float (optional) Pitch angle (in radians); default: 0.0. center : tuple of floats Coordinates of the center of rotation; default: [0.0, 0.0, 0.0].","title":"Parameters"},{"location":"api/#returns_11","text":"xr : float x-coordinate of rotated point. yr : float y-coordinate of rotated point. zr : float z-coordinate of rotated point.","title":"Returns"},{"location":"api/#rotate3d_vec","text":"rotate3d_vec = numpy.vectorize(rotate3d, excluded=['roll', 'yaw', 'pitch', 'center'] ...","title":"rotate3d_vec"},{"location":"api/#petibmpyqcriterion","text":"Module with functions to compute the Q-criterion","title":"petibmpy.qcriterion"},{"location":"api/#qcriterion","text":"def qcriterion(velocity, grid) Compute the Q-criterion on a 3D grid.","title":"qcriterion()"},{"location":"api/#parameters_13","text":"velocity : tuple of numpy.ndarray objects The velocity vector field given as (u, v, w). grid : tuple of numpy.ndarray objects The structured Cartesian grid given as (x, y, z).","title":"Parameters"},{"location":"api/#returns_12","text":"qcrit : numpy.ndarray Value of the Q-criterion on the 3D grid.","title":"Returns"},{"location":"api/#petibmpyregularize","text":"Module with function to regularize a 2D curve (with uniform resolution).","title":"petibmpy.regularize"},{"location":"api/#get_perimeter","text":"def get_perimeter(x, y) Return the perimeter of the geometry.","title":"get_perimeter()"},{"location":"api/#parameters_14","text":"x : numpy.ndarray x-coordinate of the points along the curve. y : numpy.ndarray y-coordinate of the points along the curve.","title":"Parameters"},{"location":"api/#returns_13","text":"perimeter : float The perimeter.","title":"Returns"},{"location":"api/#regularize2d","text":"def regularize2d(xo, yo, N=None, ds=None, atol=1.0E-06) Regularize the geometry.","title":"regularize2d()"},{"location":"api/#parameters_15","text":"xo: numpy.ndarray of floats The x-coordinates of the boundary to regularize. yo: numpy.ndarray of floats The y-coordinates of the boundary to regularize. N: integer, optional Number of divisions; default: None. ds: float, optional Desired segment-length; default: None. atol: float, optional Desired tolerance for discretization; default: 1.0E-06.","title":"Parameters"},{"location":"api/#returns_14","text":"x: numpy.ndarray of floats The x-coordinates of the regularized boundary. y: numpy.ndarray of floats The y-coordinates of the regularized boundary.","title":"Returns"},{"location":"api/#petibmpygrid","text":"Module to create/read/write a PetIBM grid.","title":"petibmpy.grid"},{"location":"api/#cartesiangrid-objects","text":"def __init__(self, config=None) Contain information about a structured Cartesian grid.","title":"CartesianGrid Objects"},{"location":"api/#cartesiangrid__init__","text":"def __init__(self, config=None) Initialize the grid.","title":"CartesianGrid.__init__()"},{"location":"api/#parameters_16","text":"config : dictionary (optional) Configuration of the grid to create; default: None.","title":"Parameters"},{"location":"api/#cartesiangrid__repr__","text":"def __repr__(self, ndigits=6) Representation of the grid.","title":"CartesianGrid.__repr__()"},{"location":"api/#parameters_17","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#cartesiangridcreate","text":"def create(self, config) Create the grid.","title":"CartesianGrid.create()"},{"location":"api/#parameters_18","text":"config : dictionary Configuration of the grid.","title":"Parameters"},{"location":"api/#cartesiangridget_number_cells","text":"def get_number_cells(self) Return the number of cells in the grid.","title":"CartesianGrid.get_number_cells()"},{"location":"api/#cartesiangridget_gridlines","text":"def get_gridlines(self) Return the gridlines as a list of 1D NumPy arrays of floats.","title":"CartesianGrid.get_gridlines()"},{"location":"api/#cartesiangridwrite_hdf5","text":"def write_hdf5(self, filepath) Save the grid into HDF5 file.","title":"CartesianGrid.write_hdf5()"},{"location":"api/#parameters_19","text":"filepath : pathlib.Path or string Path of the HDF5 file to write into.","title":"Parameters"},{"location":"api/#cartesiangridwrite_yaml","text":"def write_yaml(self, filepath, ndigits=6) Write the YAML configuration node for PetIBM.","title":"CartesianGrid.write_yaml()"},{"location":"api/#parameters_20","text":"filepath : pathlib.Path or string Path of the YAML file to write into. ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#gridline-objects","text":"def __init__(self, config=None) Contain information about a gridline of a structured Cartesian grid.","title":"GridLine Objects"},{"location":"api/#gridline__init__","text":"def __init__(self, config=None) Initialize the gridline.","title":"GridLine.__init__()"},{"location":"api/#parameters_21","text":"config : dictionary (optional) Configuration of the gridline to create; default: None.","title":"Parameters"},{"location":"api/#gridline__repr__","text":"def __repr__(self, ndigits=6) Representation of the gridline.","title":"GridLine.__repr__()"},{"location":"api/#parameters_22","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#gridlinecreate","text":"def create(self, config) Create the gridline.","title":"GridLine.create()"},{"location":"api/#parameters_23","text":"config : dictionary Configuration of the gridline.","title":"Parameters"},{"location":"api/#gridlineget_size","text":"def get_size(self) Return the number of vertices in the gridline.","title":"GridLine.get_size()"},{"location":"api/#gridlineasarray","text":"def asarray(self) Return the gridline as a 1D NumPy array of floats.","title":"GridLine.asarray()"},{"location":"api/#gridlineyaml_node","text":"def yaml_node(self, ndigits=6) Return the YAML configuration node for PetIBM.","title":"GridLine.yaml_node()"},{"location":"api/#parameters_24","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#returns_15","text":"node : dictionary Configuration node for the gridline.","title":"Returns"},{"location":"api/#segment-objects","text":"def __init__(self, config=None) Contain information about a segment of a gridline.","title":"Segment Objects"},{"location":"api/#segment__init__","text":"def __init__(self, config=None) Initialize the segment.","title":"Segment.__init__()"},{"location":"api/#parameters_25","text":"config : dictionary (optional) Configuration of the segment to create; default: None.","title":"Parameters"},{"location":"api/#segment__repr__","text":"def __repr__(self, ndigits=6) Representation of the segment.","title":"Segment.__repr__()"},{"location":"api/#parameters_26","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#segmentcreate","text":"def create(self, config) Create the segment.","title":"Segment.create()"},{"location":"api/#parameters_27","text":"config : dictionary Configuration of the segment.","title":"Parameters"},{"location":"api/#segmentasarray","text":"def asarray(self) Return the segment as a 1D NumPy array of floats.","title":"Segment.asarray()"},{"location":"api/#segmentyaml_node","text":"def yaml_node(self, ndigits=6) Return the YAML configuration node for PetIBM.","title":"Segment.yaml_node()"},{"location":"api/#parameters_28","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#returns_16","text":"node : dictionary Configuration node for the segment.","title":"Returns"},{"location":"api/#read_grid_hdf5","text":"def read_grid_hdf5(filepath, name) Read a grid from HDF5 file.","title":"read_grid_hdf5()"},{"location":"api/#parameters_29","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid.","title":"Parameters"},{"location":"api/#returns_17","text":"x : numpy.ndarray The x-coordinates along a gridline in the x-direction. y : numpy.ndarray The y-coordinates along a gridline in the y-direction. z : numpy.ndarray The z-coordinates along a gridline in the z-direction.","title":"Returns"},{"location":"api/#write_grid_hdf5","text":"def write_grid_hdf5(filepath, name, grid) Write a grid to a HDF5 file.","title":"write_grid_hdf5()"},{"location":"api/#parameters_30","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid. grid : tuple of numpy.ndarray objects The gridline coordinates as 1D arrays of floats.","title":"Parameters"},{"location":"api/#petibmpybod","text":"Module with I/O functions for immersed body.","title":"petibmpy.bod"},{"location":"api/#write_body","text":"def write_body(filepath, coords) Save the boundary coordinates to a file.","title":"write_body()"},{"location":"api/#parameters_31","text":"filepath : pathlib.Path object or string Path of the file to write. coords : tuple of lists or numpy.ndarray objects The x, y, and z coordinates of the boundary.","title":"Parameters"},{"location":"api/#read_body","text":"def read_body(filepath, kwargs) Read the boundary coordinates from a file.","title":"read_body()"},{"location":"api/#parameters_32","text":"filepath : pathlib.Path object or string Path of the file to read. kwargs : dictionary Keyword arguments to pass to numpy.loadtxt.","title":"Parameters"},{"location":"api/#returns_18","text":"coords : numpy.ndarray The boundary coordinates.","title":"Returns"},{"location":"api/#petibmpycreatexdmf","text":"Module to create a XDMF file for a PetIBM field variable.","title":"petibmpy.createxdmf"},{"location":"api/#write_xdmf","text":"def write_xdmf(outpath, datadir, gridpath, name, nstart=None, nt=None, nsave=None, states=None, times=None) Write a XDMF file to read the solution of a PetIBM variable.","title":"write_xdmf()"},{"location":"api/#parameters_33","text":"outpath : pathlib.Path object Path of the XDMF file to create. datadir : pathlib.Path object Data directory. gridpath : pathlib.Path object Path of the file containing the gridline coordinates. name : string Name of the field variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None.","title":"Parameters"},{"location":"api/#write_xdmf_multi","text":"def write_xdmf_multi(outpath, config, nstart=None, nt=None, nsave=None, states=None, times=None) Write a XDMF file to read the solution of multiple PetIBM variables.","title":"write_xdmf_multi()"},{"location":"api/#parameters_34","text":"outpath : pathlib.Path object Path of the XDMF file to create. config : dictionary Should contains two keys: 'grid' and 'data'. The value mapped to 'grid' is the path of the HDF5 grid file. The value mapped to 'data' is a dictionary. Each item of the 'data' dictionary is labeled with the name of the variable to add to the XDMF file that is mapped to the path of the directory that contains the numerical solution for that variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None.","title":"Parameters"},{"location":"changelog/","text":"Change Log Current development Added Documentation with Mkdocs (built on gh-pages using doctr during Travis CI job). Changed Fixed Removed 0.1 Added Add modules with PEP8-compliant style. Add configuration file for Travis CI. Changed Fixed Removed","title":"Changelog"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#current-development","text":"","title":"Current development"},{"location":"changelog/#added","text":"Documentation with Mkdocs (built on gh-pages using doctr during Travis CI job).","title":"Added"},{"location":"changelog/#changed","text":"","title":"Changed"},{"location":"changelog/#fixed","text":"","title":"Fixed"},{"location":"changelog/#removed","text":"","title":"Removed"},{"location":"changelog/#01","text":"","title":"0.1"},{"location":"changelog/#added_1","text":"Add modules with PEP8-compliant style. Add configuration file for Travis CI.","title":"Added"},{"location":"changelog/#changed_1","text":"","title":"Changed"},{"location":"changelog/#fixed_1","text":"","title":"Fixed"},{"location":"changelog/#removed_1","text":"","title":"Removed"},{"location":"contributing/","text":"How to contribute to petibmpy Welcome to the developer's guide of petibmpy! Adding new features and fixing bugs All new features and bug fixes must go through a pull-request review procedure. If you want to contribute to petibmpy, please fork the main petibmpy repository, make your changes on your fork, and then open a pull-request. For new features and minor bugs (with small impact), the base branch of the pull-request should be the develop branch of the main repository. (The develop branch will be merged into the master one once we are ready for a new release of petibmpy.) For major bugs, the base branch should be the master branch of the main repository; it will be considered as a hotfix (bugfix) and a new version of petibmpy will be released as soon as possible by the maintainers with the micro number incremented. New features should come with some kind of test or example to verify and/or validate the implementation. Reporting bugs and requesting new features To report bugs, request new features, or simply ask questions, please open a GitHub issue on the main repository. Writing documentation New classes, methods, and functions must be documented with doctrings. You should also add code documentation whenever necessary; it will greatly help other developers to review your new features and bug fixes.","title":"Contributing"},{"location":"contributing/#how-to-contribute-to-petibmpy","text":"Welcome to the developer's guide of petibmpy!","title":"How to contribute to petibmpy"},{"location":"contributing/#adding-new-features-and-fixing-bugs","text":"All new features and bug fixes must go through a pull-request review procedure. If you want to contribute to petibmpy, please fork the main petibmpy repository, make your changes on your fork, and then open a pull-request. For new features and minor bugs (with small impact), the base branch of the pull-request should be the develop branch of the main repository. (The develop branch will be merged into the master one once we are ready for a new release of petibmpy.) For major bugs, the base branch should be the master branch of the main repository; it will be considered as a hotfix (bugfix) and a new version of petibmpy will be released as soon as possible by the maintainers with the micro number incremented. New features should come with some kind of test or example to verify and/or validate the implementation.","title":"Adding new features and fixing bugs"},{"location":"contributing/#reporting-bugs-and-requesting-new-features","text":"To report bugs, request new features, or simply ask questions, please open a GitHub issue on the main repository.","title":"Reporting bugs and requesting new features"},{"location":"contributing/#writing-documentation","text":"New classes, methods, and functions must be documented with doctrings. You should also add code documentation whenever necessary; it will greatly help other developers to review your new features and bug fixes.","title":"Writing documentation"}]}