{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PetibmPy: Python processing tools for PetIBM Small Python package to perform pre- and post-processing steps for PetIBM . Dependencies PetIBM (last tested: 0.4.2 ) Python ( 3.6.8 ) H5Py ( 2.9.0 ) lxml ( 4.3.3 ) Matplotlib ( 3.0.3 ) NumPy ( 1.16.3 ) Pyyaml ( 5.1 ) SciPy ( 1.2.1 ) Installation With Anaconda: conda env create --name=py36-petibmpy --file=environment.yaml conda activate py36-petibmpy python setup.py develop Contact Please e-mail Olivier Mesnard if you have any questions, suggestions, or feedback. To report bugs, please use the GitHub issue tracking system. We also welcome pull-requests.","title":"Home"},{"location":"#petibmpy-python-processing-tools-for-petibm","text":"Small Python package to perform pre- and post-processing steps for PetIBM .","title":"PetibmPy: Python processing tools for PetIBM"},{"location":"#dependencies","text":"PetIBM (last tested: 0.4.2 ) Python ( 3.6.8 ) H5Py ( 2.9.0 ) lxml ( 4.3.3 ) Matplotlib ( 3.0.3 ) NumPy ( 1.16.3 ) Pyyaml ( 5.1 ) SciPy ( 1.2.1 )","title":"Dependencies"},{"location":"#installation","text":"With Anaconda: conda env create --name=py36-petibmpy --file=environment.yaml conda activate py36-petibmpy python setup.py develop","title":"Installation"},{"location":"#contact","text":"Please e-mail Olivier Mesnard if you have any questions, suggestions, or feedback. To report bugs, please use the GitHub issue tracking system. We also welcome pull-requests.","title":"Contact"},{"location":"api/","text":"Table of Contents petibmpy petibmpy.bod write_body read_body petibmpy.misc petibmpy.extrude extrude2d petibmpy.field read_field_hdf5 write_field_hdf5 linear_interpolation interpolate3d interpolate2d petibmpy.logview PETScLogView plot_events_breakdown petibmpy.regularize regularize2d petibmpy.forces read_forces get_force_coefficients get_time_averaged_values get_rms_values petibmpy.version petibmpy.grid CartesianGrid GridLine Segment read_grid_hdf5 write_grid_hdf5 petibmpy.qcriterion qcriterion petibmpy.probes ProbeVolume ProbePoint Probe probes_yaml_dump petibmpy.rotate rotate2d rotate3d rotate3d_vec petibmpy.createxdmf write_xdmf write_xdmf_multi petibmpy petibmpy.bod Module with I/O functions for immersed body. write_body(filepath, coords) Save the boundary coordinates to a file. Parameters filepath : pathlib.Path object or string Path of the file to write. coords : tuple of lists or numpy.ndarray objects The x, y, and z coordinates of the boundary. read_body(filepath, kwargs) Read the boundary coordinates from a file. Parameters filepath : pathlib.Path object or string Path of the file to read. kwargs : dictionary Keyword arguments to pass to numpy.loadtxt. Returns coords : numpy.ndarray The boundary coordinates. petibmpy.misc Collection of miscellaneous functions and classes. petibmpy.extrude Module with function to extrude a 2D geometry in the third direction. extrude2d(x, y, limits, n=None, ds=None, force=False) Extrude the two-dimensional section along the third direction (z). Parameters x : numpy.ndarray x-coordinates of the section. y : numpy.ndarray y-coordinates of the section. limits : 2-list of floats Limits of the extrusion. n : integer, optional Number of divisions in the z-direction; default: None. ds : float, optional Desired segment-length; default: None. force : boolean, optional Forces the extrusion to the limits prescribed; default: False. Returns x : numpy.ndarray x-coordinates of the geometry. y : numpy.ndarray y-coordinates of the geometry. z : numpy.ndarray z-coordinates of the geometry. petibmpy.field Module to read/write a PetIBM field variable. read_field_hdf5(filepath, name) Read a field from HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable. Returns field : numpy.ndarray The PetIBM field variable as a NumPy array of floats. write_field_hdf5(filepath, name, field) Write a field to a HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable. field : numpy.ndarray The PetIBM field variable as a NumPy array of floats. linear_interpolation(u, x, xi) Perform a linear interpolation along the first axis. Parameters u : numpy.ndarray Array to interpolate. x : numpy.ndarray Gridline locations. xi : float Target location. Returns ui : numpy.ndarray or float Interpolated values. interpolate3d(field, grid1, grid2, kwargs) Interpolate a 3D field from one grid to another. Parameters field : numpy.ndarray The 3D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y, z). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y, z). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn. Returns field2 : numpy.ndarray The interpolated 3D field. interpolate2d(field, grid1, grid2, kwargs) Interpolate a 2D field from one grid to another. Parameters field : numpy.ndarray The 2D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn. Returns field2 : numpy.ndarray The interpolated 2D field. petibmpy.logview Module to parse a PETSc log view file. PETScLogView Objects Parse a PETSc log view file. PETScLogView.parse_log_view(self, filepath) Parse a PETSc log view file. plot_events_breakdown(ax, runs, ylabel='wall-time (s)', event_names=None, bar_width=0.5) Add a bar chart of the breakdown of events to an axis. petibmpy.regularize Module with function to regularize a 2D curve (with uniform resolution). regularize2d(xo, yo, N=None, ds=None, atol=1.0E-06) Regularize the geometry. Parameters xo: numpy.ndarray of floats The x-coordinates of the boundary to regularize. yo: numpy.ndarray of floats The y-coordinates of the boundary to regularize. N: integer, optional Number of divisions; default: None. ds: float, optional Desired segment-length; default: None. atol: float, optional Desired tolerance for discretization; default: 1.0E-06. Returns x: numpy.ndarray of floats The x-coordinates of the regularized boundary. y: numpy.ndarray of floats The y-coordinates of the regularized boundary. petibmpy.forces Module with functions to process forces. read_forces(filepaths) Read PetIBM forces from given file(s). If multiple files are provided, the histories are concatenated. Parameters filepaths : tuple of pathlib.Path objects or strings Path of the files to load the history from. Returns data : numpy.ndarray Time followed by the forces in the x, y, and z directions. get_force_coefficients(forces, *,, ,, =) Convert forces to force coefficients. Parameters forces : tuple of numpy.ndarray objects The forces. coeff : float (optional) The scaling coefficient; default: 1.0. Returns force_coeffs : tuple of numpy.ndarray objects The force coefficients. get_time_averaged_values(t, forces, *,, ,, =) Compute the time-averaged values. Parameters t : numpy.ndarray object The time values. forces : tuple of numpy.ndarray objects The forces (or force coefficients). limits : tuple of 2 floats (optional) Time limits used to compute the mean; default: (-inf, +inf). Returns means : tuple of floats The time-averaged values. get_rms_values(t, forces, *,, ,, =) Compute the root-mean-square of the signals. Parameters t : numpy.ndarray object The time values. forces : tuple of numpy.ndarray objects The forces (or force coefficients). limits : tuple of 2 floats (optional) Time limits used to compute the RMS; default: (-inf, +inf). Returns rms : tuple of floats The RMS values. petibmpy.version Set up the version. petibmpy.grid Module to create/read/write a PetIBM grid. CartesianGrid Objects Contain information about a structured Cartesian grid. CartesianGrid.create(self, config) Create the grid. Parameters config : dictionary Configuration of the grid. CartesianGrid.get_number_cells(self) Return the number of cells in the grid. CartesianGrid.get_gridlines(self) Return the gridlines as a list of 1D NumPy arrays of floats. CartesianGrid.write_hdf5(self, filepath) Save the grid into HDF5 file. Parameters filepath : pathlib.Path or string Path of the HDF5 file to write into. CartesianGrid.write_yaml(self, filepath, ndigits=6) Write the YAML configuration node for PetIBM. Parameters filepath : pathlib.Path or string Path of the YAML file to write into. ndigits : integer (optional) Number of digits to represent floats; default: 6. GridLine Objects Contain information about a gridline of a structured Cartesian grid. GridLine.create(self, config) Create the gridline. Parameters config : dictionary Configuration of the gridline. GridLine.get_size(self) Return the number of vertices in the gridline. GridLine.asarray(self) Return the gridline as a 1D NumPy array of floats. GridLine.yaml_node(self, ndigits=6) Return the YAML configuration node for PetIBM. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. Returns node : dictionary Configuration node for the gridline. Segment Objects Contain information about a segment of a gridline. Segment.create(self, config) Create the segment. Parameters config : dictionary Configuration of the segment. Segment.asarray(self) Return the segment as a 1D NumPy array of floats. Segment.yaml_node(self, ndigits=6) Return the YAML configuration node for PetIBM. Parameters ndigits : integer (optional) Number of digits to represent floats; default: 6. Returns node : dictionary Configuration node for the segment. read_grid_hdf5(filepath, name) Read a grid from HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid. Returns x : numpy.ndarray The x-coordinates along a gridline in the x-direction. y : numpy.ndarray The y-coordinates along a gridline in the y-direction. z : numpy.ndarray The z-coordinates along a gridline in the z-direction. write_grid_hdf5(filepath, name, grid) Write a grid to a HDF5 file. Parameters filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid. grid : tuple of numpy.ndarray objects The gridline coordinates as 1D arrays of floats. petibmpy.qcriterion Module with functions to compute the Q-criterion qcriterion(velocity, grid) Compute the Q-criterion on a 3D grid. Parameters velocity : tuple of numpy.ndarray objects The velocity vector field given as (u, v, w). grid : tuple of numpy.ndarray objects The structured Cartesian grid given as (x, y, z). Returns qcrit : numpy.ndarray Value of the Q-criterion on the 3D grid. petibmpy.probes Module for PetIBM probes. ProbeVolume Objects Class for a volume probe (monitoring solution in sub-volume). ProbeVolume.adjust_box(self, grid, box=None) Adjust the box so that limits lie between two grid points. Parameters grid : list or numpy.ndarray The grid of the field to minotor box : list or numpy.ndarray, optional Estimated limits of the box, by default None ProbeVolume.read_hdf5(self, filepath, time, ndigits=6) Read the probe from a HDF5 file at a given time. Parameters filepath : pathlib.Path or str Path of file with the solution of the probe time : float Time value ndigits : int, optional Number of digits to round the time value, by default 6 Returns tuple The mesh grid of the probe numpy.ndarray The probe values ProbePoint Objects Class to monitor a field at a single point. ProbePoint.set_loc(self, loc) Set the coordinates of the point to monitor. Parameters loc : list or numpy.ndarray Coordinates of the point Probe(ptype, args, *,, ,, kwargs) Create a probe. Parameters ptype : str Type of the probe, choices are 'VOLUME' or 'POINT' Returns ProbeVolume or ProbePoint The probe Raises ValueError Type is neither 'VOLUME' nor 'POINT' probes_yaml_dump(probes, filepath, mode='w') Save the probes configuration in a YAML file. Parameters probes : list The list of probes filepath : pathlib.Path or str Path of the YAML file mode : str, optional Mode to open file, choices are 'w' or 'a', by default 'w' petibmpy.rotate Module with function to rotate a geometry. rotate2d(x, y, center=(0.0, 0.0), angle=0.0, mode='deg') Rotate (x, y) coordinates around a center. Parameters x : numpy.ndarray of floats The x-coordinates to rotate. y : numpy.ndarray of floats The y-coordinates to rotate. center : 2-tuple of floats, optional The center of rotation; default: (0.0, 0.0). angle : float, optional The angle of rotation; default: 0.0. mode : string, optional Whether angle is provided in degrees or in radians; choices: 'deg', 'rad'; default: 'deg'. Returns x_new : numpy.ndarray of floats The rotated x-coordinates. y_new : numpy.ndarray of floats The rotated y-coordinates. rotate3d(x, y, z, roll=0.0, yaw=0.0, pitch=0.0, center=(0.0, 0.0, 0.0)) Rotate 3D point. Parameters x : float x-coordinate of point. y : float y-coordinate of point. z : float z-coordinate of point. roll : float (optional) Roll angle (in radians); default: 0.0. yaw : float (optional) Yaw angle (in radians); default: 0.0. pitch : float (optional) Pitch angle (in radians); default: 0.0. center : tuple of floats Coordinates of the center of rotation; default: [0.0, 0.0, 0.0]. Returns xr : float x-coordinate of rotated point. yr : float y-coordinate of rotated point. zr : float z-coordinate of rotated point. rotate3d_vec petibmpy.createxdmf Module to create a XDMF file for a PetIBM field variable. write_xdmf(outpath, datadir, gridpath, name, nstart=None, nt=None, nsave=None, states=None, times=None) Write a XDMF file to read the solution of a PetIBM variable. Parameters outpath : pathlib.Path object Path of the XDMF file to create. datadir : pathlib.Path object Data directory. gridpath : pathlib.Path object Path of the file containing the gridline coordinates. name : string Name of the field variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None. write_xdmf_multi(outpath, config, nstart=None, nt=None, nsave=None, states=None, times=None) Write a XDMF file to read the solution of multiple PetIBM variables. Parameters outpath : pathlib.Path object Path of the XDMF file to create. config : dictionary Should contains two keys: 'grid' and 'data'. The value mapped to 'grid' is the path of the HDF5 grid file. The value mapped to 'data' is a dictionary. Each item of the 'data' dictionary is labeled with the name of the variable to add to the XDMF file that is mapped to the path of the directory that contains the numerical solution for that variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None.","title":"API"},{"location":"api/#table-of-contents","text":"petibmpy petibmpy.bod write_body read_body petibmpy.misc petibmpy.extrude extrude2d petibmpy.field read_field_hdf5 write_field_hdf5 linear_interpolation interpolate3d interpolate2d petibmpy.logview PETScLogView plot_events_breakdown petibmpy.regularize regularize2d petibmpy.forces read_forces get_force_coefficients get_time_averaged_values get_rms_values petibmpy.version petibmpy.grid CartesianGrid GridLine Segment read_grid_hdf5 write_grid_hdf5 petibmpy.qcriterion qcriterion petibmpy.probes ProbeVolume ProbePoint Probe probes_yaml_dump petibmpy.rotate rotate2d rotate3d rotate3d_vec petibmpy.createxdmf write_xdmf write_xdmf_multi","title":"Table of Contents"},{"location":"api/#parameters","text":"filepath : pathlib.Path object or string Path of the file to write. coords : tuple of lists or numpy.ndarray objects The x, y, and z coordinates of the boundary.","title":"Parameters"},{"location":"api/#parameters_1","text":"filepath : pathlib.Path object or string Path of the file to read. kwargs : dictionary Keyword arguments to pass to numpy.loadtxt.","title":"Parameters"},{"location":"api/#returns","text":"coords : numpy.ndarray The boundary coordinates.","title":"Returns"},{"location":"api/#parameters_2","text":"x : numpy.ndarray x-coordinates of the section. y : numpy.ndarray y-coordinates of the section. limits : 2-list of floats Limits of the extrusion. n : integer, optional Number of divisions in the z-direction; default: None. ds : float, optional Desired segment-length; default: None. force : boolean, optional Forces the extrusion to the limits prescribed; default: False.","title":"Parameters"},{"location":"api/#returns_1","text":"x : numpy.ndarray x-coordinates of the geometry. y : numpy.ndarray y-coordinates of the geometry. z : numpy.ndarray z-coordinates of the geometry.","title":"Returns"},{"location":"api/#parameters_3","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable.","title":"Parameters"},{"location":"api/#returns_2","text":"field : numpy.ndarray The PetIBM field variable as a NumPy array of floats.","title":"Returns"},{"location":"api/#parameters_4","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the field variable. field : numpy.ndarray The PetIBM field variable as a NumPy array of floats.","title":"Parameters"},{"location":"api/#parameters_5","text":"u : numpy.ndarray Array to interpolate. x : numpy.ndarray Gridline locations. xi : float Target location.","title":"Parameters"},{"location":"api/#returns_3","text":"ui : numpy.ndarray or float Interpolated values.","title":"Returns"},{"location":"api/#parameters_6","text":"field : numpy.ndarray The 3D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y, z). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y, z). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn.","title":"Parameters"},{"location":"api/#returns_4","text":"field2 : numpy.ndarray The interpolated 3D field.","title":"Returns"},{"location":"api/#parameters_7","text":"field : numpy.ndarray The 2D field to interpolate. grid1 : tuple of numpy.ndarray objects The grid on which the field is defined. The grid should be provided as (x, y). grid2 : tuple of numpy.ndarray objects The grid on which to interpolate the field. The grid should be provided as (x, y). **kwargs : Arbitrary keyword arguments To be passed to scipy.interpolate.interpn.","title":"Parameters"},{"location":"api/#returns_5","text":"field2 : numpy.ndarray The interpolated 2D field.","title":"Returns"},{"location":"api/#parameters_8","text":"xo: numpy.ndarray of floats The x-coordinates of the boundary to regularize. yo: numpy.ndarray of floats The y-coordinates of the boundary to regularize. N: integer, optional Number of divisions; default: None. ds: float, optional Desired segment-length; default: None. atol: float, optional Desired tolerance for discretization; default: 1.0E-06.","title":"Parameters"},{"location":"api/#returns_6","text":"x: numpy.ndarray of floats The x-coordinates of the regularized boundary. y: numpy.ndarray of floats The y-coordinates of the regularized boundary.","title":"Returns"},{"location":"api/#parameters_9","text":"filepaths : tuple of pathlib.Path objects or strings Path of the files to load the history from.","title":"Parameters"},{"location":"api/#returns_7","text":"data : numpy.ndarray Time followed by the forces in the x, y, and z directions.","title":"Returns"},{"location":"api/#parameters_10","text":"forces : tuple of numpy.ndarray objects The forces. coeff : float (optional) The scaling coefficient; default: 1.0.","title":"Parameters"},{"location":"api/#returns_8","text":"force_coeffs : tuple of numpy.ndarray objects The force coefficients.","title":"Returns"},{"location":"api/#parameters_11","text":"t : numpy.ndarray object The time values. forces : tuple of numpy.ndarray objects The forces (or force coefficients). limits : tuple of 2 floats (optional) Time limits used to compute the mean; default: (-inf, +inf).","title":"Parameters"},{"location":"api/#returns_9","text":"means : tuple of floats The time-averaged values.","title":"Returns"},{"location":"api/#parameters_12","text":"t : numpy.ndarray object The time values. forces : tuple of numpy.ndarray objects The forces (or force coefficients). limits : tuple of 2 floats (optional) Time limits used to compute the RMS; default: (-inf, +inf).","title":"Parameters"},{"location":"api/#returns_10","text":"rms : tuple of floats The RMS values.","title":"Returns"},{"location":"api/#parameters_13","text":"config : dictionary Configuration of the grid.","title":"Parameters"},{"location":"api/#parameters_14","text":"filepath : pathlib.Path or string Path of the HDF5 file to write into.","title":"Parameters"},{"location":"api/#parameters_15","text":"filepath : pathlib.Path or string Path of the YAML file to write into. ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#parameters_16","text":"config : dictionary Configuration of the gridline.","title":"Parameters"},{"location":"api/#parameters_17","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#returns_11","text":"node : dictionary Configuration node for the gridline.","title":"Returns"},{"location":"api/#parameters_18","text":"config : dictionary Configuration of the segment.","title":"Parameters"},{"location":"api/#parameters_19","text":"ndigits : integer (optional) Number of digits to represent floats; default: 6.","title":"Parameters"},{"location":"api/#returns_12","text":"node : dictionary Configuration node for the segment.","title":"Returns"},{"location":"api/#parameters_20","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid.","title":"Parameters"},{"location":"api/#returns_13","text":"x : numpy.ndarray The x-coordinates along a gridline in the x-direction. y : numpy.ndarray The y-coordinates along a gridline in the y-direction. z : numpy.ndarray The z-coordinates along a gridline in the z-direction.","title":"Returns"},{"location":"api/#parameters_21","text":"filepath : string or pathlib.Path object Path of the HDF5 file. name : string Name of the grid. grid : tuple of numpy.ndarray objects The gridline coordinates as 1D arrays of floats.","title":"Parameters"},{"location":"api/#parameters_22","text":"velocity : tuple of numpy.ndarray objects The velocity vector field given as (u, v, w). grid : tuple of numpy.ndarray objects The structured Cartesian grid given as (x, y, z).","title":"Parameters"},{"location":"api/#returns_14","text":"qcrit : numpy.ndarray Value of the Q-criterion on the 3D grid.","title":"Returns"},{"location":"api/#parameters_23","text":"grid : list or numpy.ndarray The grid of the field to minotor box : list or numpy.ndarray, optional Estimated limits of the box, by default None","title":"Parameters"},{"location":"api/#parameters_24","text":"filepath : pathlib.Path or str Path of file with the solution of the probe time : float Time value ndigits : int, optional Number of digits to round the time value, by default 6","title":"Parameters"},{"location":"api/#returns_15","text":"tuple The mesh grid of the probe numpy.ndarray The probe values","title":"Returns"},{"location":"api/#parameters_25","text":"loc : list or numpy.ndarray Coordinates of the point","title":"Parameters"},{"location":"api/#parameters_26","text":"ptype : str Type of the probe, choices are 'VOLUME' or 'POINT'","title":"Parameters"},{"location":"api/#returns_16","text":"ProbeVolume or ProbePoint The probe","title":"Returns"},{"location":"api/#raises","text":"ValueError Type is neither 'VOLUME' nor 'POINT'","title":"Raises"},{"location":"api/#parameters_27","text":"probes : list The list of probes filepath : pathlib.Path or str Path of the YAML file mode : str, optional Mode to open file, choices are 'w' or 'a', by default 'w'","title":"Parameters"},{"location":"api/#parameters_28","text":"x : numpy.ndarray of floats The x-coordinates to rotate. y : numpy.ndarray of floats The y-coordinates to rotate. center : 2-tuple of floats, optional The center of rotation; default: (0.0, 0.0). angle : float, optional The angle of rotation; default: 0.0. mode : string, optional Whether angle is provided in degrees or in radians; choices: 'deg', 'rad'; default: 'deg'.","title":"Parameters"},{"location":"api/#returns_17","text":"x_new : numpy.ndarray of floats The rotated x-coordinates. y_new : numpy.ndarray of floats The rotated y-coordinates.","title":"Returns"},{"location":"api/#parameters_29","text":"x : float x-coordinate of point. y : float y-coordinate of point. z : float z-coordinate of point. roll : float (optional) Roll angle (in radians); default: 0.0. yaw : float (optional) Yaw angle (in radians); default: 0.0. pitch : float (optional) Pitch angle (in radians); default: 0.0. center : tuple of floats Coordinates of the center of rotation; default: [0.0, 0.0, 0.0].","title":"Parameters"},{"location":"api/#returns_18","text":"xr : float x-coordinate of rotated point. yr : float y-coordinate of rotated point. zr : float z-coordinate of rotated point.","title":"Returns"},{"location":"api/#parameters_30","text":"outpath : pathlib.Path object Path of the XDMF file to create. datadir : pathlib.Path object Data directory. gridpath : pathlib.Path object Path of the file containing the gridline coordinates. name : string Name of the field variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None.","title":"Parameters"},{"location":"api/#parameters_31","text":"outpath : pathlib.Path object Path of the XDMF file to create. config : dictionary Should contains two keys: 'grid' and 'data'. The value mapped to 'grid' is the path of the HDF5 grid file. The value mapped to 'data' is a dictionary. Each item of the 'data' dictionary is labeled with the name of the variable to add to the XDMF file that is mapped to the path of the directory that contains the numerical solution for that variable. nstart : integer (optional) Starting time step; default: None. nt : integer (optional) Number of time steps; default: None. nsave : integer (optional) Frequency of saving in number of time steps; default: None. states : list of integers (optional) The list of time-step indices to consider in the XDMF file; default: None. times : list of floats (optional) The list of time values; default: None.","title":"Parameters"},{"location":"changelog/","text":"Change Log Current development Added Documentation with Mkdocs (built on gh-pages using doctr during Travis CI job). Code coverage with coveralls. Unit-tests Module to parse a PETSc log view file. Function to interpolate a 2D field from one grid to another. Module to create probes (volume and point) and to load data from files. Changed Update package version of dependencies. Fixed Removed 0.1 Added Add modules with PEP8-compliant style. Add configuration file for Travis CI. Changed Fixed Removed","title":"Changelog"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#current-development","text":"","title":"Current development"},{"location":"changelog/#added","text":"Documentation with Mkdocs (built on gh-pages using doctr during Travis CI job). Code coverage with coveralls. Unit-tests Module to parse a PETSc log view file. Function to interpolate a 2D field from one grid to another. Module to create probes (volume and point) and to load data from files.","title":"Added"},{"location":"changelog/#changed","text":"Update package version of dependencies.","title":"Changed"},{"location":"changelog/#fixed","text":"","title":"Fixed"},{"location":"changelog/#removed","text":"","title":"Removed"},{"location":"changelog/#01","text":"","title":"0.1"},{"location":"changelog/#added_1","text":"Add modules with PEP8-compliant style. Add configuration file for Travis CI.","title":"Added"},{"location":"changelog/#changed_1","text":"","title":"Changed"},{"location":"changelog/#fixed_1","text":"","title":"Fixed"},{"location":"changelog/#removed_1","text":"","title":"Removed"},{"location":"contributing/","text":"How to contribute to petibmpy Welcome to the developer's guide of petibmpy! Adding new features and fixing bugs All new features and bug fixes must go through a pull-request review procedure. If you want to contribute to petibmpy, please fork the main petibmpy repository, make your changes on your fork, and then open a pull-request. For new features and minor bugs (with small impact), the base branch of the pull-request should be the develop branch of the main repository. (The develop branch will be merged into the master one once we are ready for a new release of petibmpy.) For major bugs, the base branch should be the master branch of the main repository; it will be considered as a hotfix (bugfix) and a new version of petibmpy will be released as soon as possible by the maintainers with the micro number incremented. New features should come with some kind of test or example to verify and/or validate the implementation. Reporting bugs and requesting new features To report bugs, request new features, or simply ask questions, please open a GitHub issue on the main repository. Writing documentation New classes, methods, and functions must be documented with doctrings. You should also add code documentation whenever necessary; it will greatly help other developers to review your new features and bug fixes.","title":"Contributing"},{"location":"contributing/#how-to-contribute-to-petibmpy","text":"Welcome to the developer's guide of petibmpy!","title":"How to contribute to petibmpy"},{"location":"contributing/#adding-new-features-and-fixing-bugs","text":"All new features and bug fixes must go through a pull-request review procedure. If you want to contribute to petibmpy, please fork the main petibmpy repository, make your changes on your fork, and then open a pull-request. For new features and minor bugs (with small impact), the base branch of the pull-request should be the develop branch of the main repository. (The develop branch will be merged into the master one once we are ready for a new release of petibmpy.) For major bugs, the base branch should be the master branch of the main repository; it will be considered as a hotfix (bugfix) and a new version of petibmpy will be released as soon as possible by the maintainers with the micro number incremented. New features should come with some kind of test or example to verify and/or validate the implementation.","title":"Adding new features and fixing bugs"},{"location":"contributing/#reporting-bugs-and-requesting-new-features","text":"To report bugs, request new features, or simply ask questions, please open a GitHub issue on the main repository.","title":"Reporting bugs and requesting new features"},{"location":"contributing/#writing-documentation","text":"New classes, methods, and functions must be documented with doctrings. You should also add code documentation whenever necessary; it will greatly help other developers to review your new features and bug fixes.","title":"Writing documentation"}]}